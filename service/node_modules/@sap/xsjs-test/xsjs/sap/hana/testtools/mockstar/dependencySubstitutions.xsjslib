/*jslint nomen:true*/
function DependencySubstitutions(substitutionRules, repositoryFacade) {

	this._substitutionRules = substitutionRules;

	var HanaObjectTypes = $.import("sap.hana.testtools.mockstar", "hanaObjectTypes").HanaObjectTypes;
	$.trace.info("substitution rules: " + substitutionRules.toSource());

	function getPhysicalSchema(schemaName) {
		return repositoryFacade.getPhysicalSchemaName(schemaName);
	}

	function isSubstitutionRuleForCDSEntity(hanaObject, substitutionRule) {
		return substitutionRule.original.name.startsWith(hanaObject.getName() + ".") && getPhysicalSchema(substitutionRule.original.schema) === hanaObject.getPhysicalSchema();
	}
	function isSubstitutionRuleForOther(hanaObject, substitutionRule) {
		return hanaObject.match(getPhysicalSchema(substitutionRule.original.schema), substitutionRule.original.name);
	}

	this.findSubstitutionRule = function(hanaObject) {
		$.trace.info("try to find '" + hanaObject.toString() + "' in substitution rules: " + substitutionRules.toSource());

		var isSubstitutionRuleForObject = hanaObject.type.isOfType(HanaObjectTypes.HDBDD) ? isSubstitutionRuleForCDSEntity : isSubstitutionRuleForOther;

		var i;
		for (i = 0; i < substitutionRules.length; ++i) {
			if (isSubstitutionRuleForObject(hanaObject, substitutionRules[i])) {
				$.trace.info("found rule '" + substitutionRules[i].toSource() + "' for '" + hanaObject.toString() + "'");
				return substitutionRules[i];
			}
		}

		$.trace.info("no rule found for '" + hanaObject.toString() + "'");
		return null;
	};

	this.hasSubstitutionRuleFor = function(hanaObject) {
		return !!this.findSubstitutionRule(hanaObject);
	};

	this.getSubstituteFor = function(hanaObject) {
		var rule = this.findSubstitutionRule(hanaObject);
		if (!rule) {
			throw new Error("Not found: " + hanaObject.toString());
		}
		return rule.substitute;
	};

	this.getMatchingRulesForCDSFile = function(hanaObject) {
		if (!hanaObject.type.isOfType(HanaObjectTypes.HDBDD)) {
			return [];
		}
		$.trace.info("try to find matching rules for CDS object '" + hanaObject.toString() + "' in substitution rules: " + substitutionRules.toSource());
		var matchingRules = [];

		substitutionRules.forEach(function(substitutionRule) {
			if (isSubstitutionRuleForCDSEntity(hanaObject, substitutionRule)) {
				$.trace.info("found rule '" + substitutionRule.toSource() + "' for '" + hanaObject.toString() + "'");
				matchingRules.push(substitutionRule);
			}
		});

		$.trace.info("matching rules found for '" + hanaObject.toString() + "': " + matchingRules.toSource());
		return matchingRules;
	};

}