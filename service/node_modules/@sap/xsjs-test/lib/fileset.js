/**
 * Created on 15.04.2015.
 */

function Fileset(includes, excludes){
    includes = includes || []
    excludes = excludes || []

    function toArray(param){
        if(!Array.isArray(param)){
            if(typeof param==='string'){
                param = param.split(' ')
            }else{
                throw new TypeError('Expect includes parameter as array or string, but got ' + (typeof param))
            }
        }
        return param
    }

    includes = toArray(includes)
    excludes = toArray(excludes)

    function toRegExp(starPattern){
        var re = ''
        var tokens = starPattern.split('**')
        tokens = tokens.map( function(t){
            if(t.indexOf('*')>-1){
                t = t.replace('*','[^/]*')
            }

            if(t[0]==='/') t= t.slice(1)
            if(t[t.length-1]==='/') t= t.slice(0, t.length-1)
            t = t.replace('.', '\.')
            return t
        })

        re = tokens.join('(\/|\/.*\/)?')
        return new RegExp(re)
    }

    function createRegexPattern(starPattern){
        if(starPattern==='**'){
            return '.*'
        }else if(starPattern.indexOf('*')>-1){
            return starPattern.replace('*', '[^/]*')
        }else{
            return starPattern
        }
    }

    this.includeRe = includes.map(toRegExp)
    this.excludeRe = excludes.map(toRegExp)
}

Fileset.prototype.test = function(path){
    var bInclude = false
    for(var k in this.includeRe){
        var re = this.includeRe[k]
        if(re.test(path)){
            bInclude = true
            break
        }
    }//for

    if(!bInclude) return false

    var bExclude = false
    for(var k in this.excludeRe){
        var re = this.excludeRe[k]
        if(re.test(path)){
            bExclude = true
            break
        }
    }//for

    return !bExclude
}


module.exports = Fileset
