

	function Reference(obj, property) {
		this.get = function() {
			return obj[property] || (void 0);
		};
		this.set = function(value) {
			obj[property] = value;
		};
	}

	function defineRefProperty(obj, name, ref) {
		Object.defineProperty(obj, name, {
			configurable : false,
			enumerable : true,
			get : ref.get,
			set : ref.set
		});
	}

	function escapeInvalidXmlChars(attr) {
		var str = "";
		str += attr;
		return str.replace(/\&/g, "&amp;").replace(/</g, "&lt;").replace(/\>/g, "&gt;").replace(/\"/g, "&quot;").replace(/\'/g, "&apos;");
	}

	function handler(proc) {
		return function() {
			try {
				return !!proc.apply(this, arguments);
			} catch (ignore) {
			}
			return false;
		};
	}

	var anonymousFunctionID = 0;
	function serializeFunction(proc) {
		var data = proc.toString(); // toSource();
		var name = proc.name;
		if (!name) {
			name = "__anonymous" + anonymousFunctionID++;
			data = data.replace(/^function \(/, "function " + name + "(");
			// data = data.replace(/^\(?function \(/, "function " + name + "(");
			// data = data.replace(/\}\)$/, "}");
		}
		return {
			data : data,
			name : name
		};
	}

	var exported = {
		variables : [],
		eventHandlers : []
	};
	function exportFunction(proc) {
		var serialized = serializeFunction(proc);
		exported.eventHandlers.push(serialized.data);
		return serialized.name;
	}
	function exportRawJS(code) {
		var serialized = "";
		serialized += code;
		exported.variables.push(serialized);
	}

	exportFunction(handler);
	var handledObjectID = 0;

	function Element(type, attrs) {
		this.type = type;
		this.attributes = attrs;

		var self = this;
		defineRefProperty(this, "className", new Reference(this.attributes, "class"));
		defineRefProperty(this, "id", {
			set : function() {
				throw new Error("don't change the object's ID");
			},
			get : function() {
				return this.attributes.id;
			}
		});

		var clickref = {};
		clickref.set = function(handler) {
			var handlerName = exportFunction(handler);

			if (!self.attributes.id) {
				self.attributes.id = "__handledObject" + handledObjectID++;
			}
			// eventHandler.push('document.getElementById("' + self.attributes.id + '").onclick = ' + handlerName + ';');
			exported.eventHandlers.push('document.getElementById("' + self.attributes.id + '").onclick = handler(' + handlerName + ');');
		};
		defineRefProperty(this, "onclick", clickref);

		this.childNodes = [];
	}

	var voidElements = [ "area", "base", "br", "col", "command", "embed", "hr", "img", "input", "keygen", "link", "meta", "param", "source", "track", "wbr" ];
	Element.prototype.render = function() {
		var result = "<" + this.type;
		var renderedAttributes = this.renderAttributes();
		if (renderedAttributes) {
			result += " " + renderedAttributes;
		}
		result += ">";
		result += this.renderChildNodes();
		if (voidElements.indexOf(this.type.toLowerCase()) === -1) {
			result += "</" + this.type + ">";
		}
		return result;
	};

	Element.prototype.renderAttributes = function() {
		return Object.keys(this.attributes).map(function(attrName) {
			return attrName + '="' + escapeInvalidXmlChars(this.attributes[attrName]) + '"';
		}.bind(this)).join(" ");
	};

	Element.prototype.renderChildNodes = function() {
		return this.childNodes.map(function(node) {
			return node.render();
		}).join("");
	};

	function RawTextNode(text) {
		Element.call(this, "text", {});
		this.text = text;
	}

	RawTextNode.prototype = Object.create(Element.prototype);
	RawTextNode.prototype.constructor = RawTextNode;

	RawTextNode.prototype.render = function() {
		return this.text;
	};

	function TextNode(text) {
		RawTextNode.call(this, text);
	}

	TextNode.prototype = Object.create(RawTextNode.prototype);
	TextNode.prototype.constructor = TextNode;

	TextNode.prototype.render = function() {
		return escapeInvalidXmlChars(this.text);
	};

	function wrapAsDomElement(node) {
		if (node instanceof Element) {
			return node;
		}
		return new TextNode(node);
	}

	Element.prototype.appendChild = function(child) {
		var e = wrapAsDomElement(child)
		//console.log('dom.js / appendChild to ', this.type, this.childNodes.length)
		this.childNodes.push( e );
	};

	function create(type, attrs) {
		var domElem = new Element(type, attrs || {});
		/* samir */
		
		//Array.prototype.slice(arguments, 2).forEach(domElem.appendChild.bind(domElem));
		Array.slice(arguments, 2).forEach(function(childDom){
			domElem.appendChild(childDom)
		});
		return domElem;
	}

	function createElement(type) {
		return new Element(type, {});
	}

	function createTextNode(text) {
		return new TextNode(text);
	}

	function getExportedSymbols() {
		var scriptTag = create("script", {
			type : "text/javascript"
		});
		scriptTag.appendChild(new RawTextNode("//<![CDATA[\n" + exported.variables.join("\n") + "\n" + exported.eventHandlers.join("\n") + "\n//]]>"));
		return scriptTag;
	}

module.exports = {
		Element : Element,
		RawTextNode : RawTextNode,
		TextNode : TextNode,

		create : create,
		createElement : createElement,
		createTextNode : createTextNode,

		exportFunction : exportFunction,
		exportRawJS : exportRawJS,
		getExportedSymbols : getExportedSymbols,
}
