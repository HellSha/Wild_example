/**
 * @module tableDataSet
 */


var ResultSet = require('@sap/xsjs/lib/xsjs/db/dbapi/ResultSet.js')
		

    var DataExtractor = function() {
        this.mappings = [];
    };

    DataExtractor.prototype.addMapping = function(getter, property) {
        var mapping = function(source, target, index) {
            target[property] = getter.call(source, index);
        };
        this.mappings.push(mapping);
    };

    DataExtractor.prototype.makeMapping = function(object, methodName) {
        if (object[methodName]) {
            var propName = methodName.replace(/^(get|is)(.*)/, '$2');
            this.addMapping(object[methodName], propName);
        }
    };

    DataExtractor.prototype.applyMappings = function(source, target, index) {
        this.mappings.forEach(function(mapping) {
            mapping(source, target, index);
        });
    };

    var metaDataExtractor = new DataExtractor();

	/*
    ['getColumnType', 'getColumnTypeName', 'getColumnLabel', 'getCatalogName', 'getTableName', 'getPrecision', 'getColumnDisplaySize',
        'getFieldType', 'getFieldOffset', 'isFloatDec', 'getScale', 'getIdxInGroup'
    ].forEach(metaDataExtractor.makeMapping.bind(
        metaDataExtractor, getResultSetMetaDataHack()));
	*/
	var metadataFunctions = ['getColumnType', 'getColumnTypeName', 'getColumnLabel', 'getCatalogName', 'getTableName', 'getPrecision', 'getColumnDisplaySize',
        'getFieldType', 'getFieldOffset', 'isFloatDec', 'getScale', 'getIdxInGroup'
    ]

    var type2GetterMap = [];

	/*
    function addType2GetterMapping(type, getterName) {
        type2GetterMap[$.db.types[type]] = xsruntime.db.ResultSet['get' + getterName];
    }*/
	
	 function addType2GetterMapping(type, getterName) {
        type2GetterMap[type] ='get' + getterName;
    }

    addType2GetterMapping('ALPHANUM', 'String');
    addType2GetterMapping('BIGINT', 'BigInt');
    addType2GetterMapping('BINARY', 'BString');
    addType2GetterMapping('BLOB', 'Blob');
    addType2GetterMapping('BSTRING', 'BString');
    addType2GetterMapping('CHAR', 'String');
    addType2GetterMapping('CLOB', 'Clob');
    addType2GetterMapping('DATE', 'Date');
    addType2GetterMapping('DECIMAL', 'Decimal');
    addType2GetterMapping('DOUBLE', 'Double');
    addType2GetterMapping('INT', 'Integer');
    addType2GetterMapping('INTEGER', 'Integer');
    addType2GetterMapping('NCHAR', 'NString');
    addType2GetterMapping('NCLOB', 'NClob');
    addType2GetterMapping('NVARCHAR', 'NString');
    addType2GetterMapping('REAL', 'Real');
    addType2GetterMapping('SECONDDATE', 'Seconddate');
    addType2GetterMapping('SHORTTEXT', 'String');
    addType2GetterMapping('SMALLDECIMAL', 'Decimal');
    addType2GetterMapping('SMALLINT', 'Integer');
    addType2GetterMapping('TEXT', 'String');
    addType2GetterMapping('TIME', 'Time');
    addType2GetterMapping('TIMESTAMP', 'Timestamp');
    addType2GetterMapping('TINYINT', 'Integer');
    addType2GetterMapping('VARBINARY', 'BString');
    addType2GetterMapping('VARCHAR', 'String');

    function getGetterForType(type) {
        var getter = type2GetterMap[type] || $.db.ResultSet.getString;
        return getter;
    }
    
    
    // Type mapping according to Hana Command Network Protocol 
    // https://help.sap.com/doc/7e4aba181371442d9e4395e7ff71b777/2.0.00/en-US/b2969ccce77d440099bcd92fa715233e.html

    var typeCodeMapping = {
        1: "TINYINT",
        2: "SMALLINT",
        3: "INT",
        4: "BIGINT",
        5: "DECIMAL",
        6: "REAL",
        7: "DOUBLE",
        8: "CHAR",
        9: "VARCHAR",
        10: "NCHAR",
        11: "NVARCHAR",
        12: "BINARY",
        13: "VARBINARY",
        14: "DATE",
        15: "TIME",
        16: "TIMESTAMP",
        25: "CLOB",
        26: "NCLOB",
        27: "BLOB",
        28: "BOOLEAN",
        29: "STRING",
        30: "NSTRING",
        31: "BLOCATOR",
        32: "NLOCATOR",
        33: "BSTRING",
        35: "VARCHAR2",
        36: "VARCHAR3",
        37: "NVARCHAR3",
        38: "VARBINARY3",
        47: "SMALLDECIMAL",
        48: "ABAPITAB",
        49: "ABAPSTRUCT",
        50: "ARRAY",
        51: "TEXT",
        52: "SHORTTEXT",
        55: "ALPHANUM",
        61: "LONGDATE",
        62: "SECONDDATE",
        63: "DAYDATE",
        64: "SECONDTIME"            
    };
    
    

    /**
     * Creates a container that contains table-like data. Instances of TableDataSet may also created by
     * {@link module:tableDataSet~createFromJSON createFromJSON}, {@link module:tableDataSet~createFromArray createFromArray} and
     * {@link module:tableDataSet~createFromResultSet createFromResultSet}
     *
     * @inner
     * @memberof module:tableDataSet
     * @constructor
     */
    function TableDataSet() {
        this.columns = {};
    };

    /**
     * @private
     */
    TableDataSet.prototype.getColumns = function() {
        return Object.keys(this.columns).map(this.getColumn, this);
    };
    
    /*
     * Returns a the column name.
     *
     * @method getColumnName
     * @memberof! module:tableDataSet~TableDataSet.prototype
     * @param {number}
     *            colIndex Index of the requested column
     * @returns {String} the column name
     */
    /*TableDataSet.prototype.getColumnName = function(index) {
        return this.columns[index].getName();
    };*/

    /**
     * @private
     * @method addColumn
     * @memberof! module:tableDataSet~TableDataSet.prototype
     */
    TableDataSet.prototype.addColumn = function(column) {
        var name = column.getName();
        this.columns[name /*.toUpperCase()*/ ] = column;
    };

    /**
     * @private
     */
    TableDataSet.prototype.getColumn = function(name) {
        return this.columns[name /*.toUpperCase()*/ ] || undefined;
    };

    /**
     * Removes the column.
     * 
     * @param {String} name column name (case sensitive)
     * @method deleteColumn
     * @memberof! module:tableDataSet~TableDataSet.prototype
     */
    TableDataSet.prototype.deleteColumn = function(name) {
        var column = this.getColumn(name);
        delete this.columns[name /*.toUpperCase()*/ ];
        return column;
    };

    /**
     * Returns the number of rows.
     *
     * @method getRowCount
     * @memberof! module:tableDataSet~TableDataSet.prototype
     * @returns {Integer}
     */
    TableDataSet.prototype.getRowCount = function() {
        var rc = 0;
        this.getColumns().some(function(col) {
            rc = col.getRowCount();
            return rc;
        });
        return rc;
    };

    /**
     * @private
     */
    TableDataSet.prototype.getRows = function() {
        var i, rows = [];
        for (i = 0; i < this.getRowCount(); ++i) {
            rows.push(this.getRow(i));
        }
        return rows;
    };

    /**
     * Returns a single row
     *
     * @method getRow
     * @memberof! module:tableDataSet~TableDataSet.prototype
     * @param {number}
     *            rowIndex Index of the requested row starting with 0
     * @returns {Object} an object that has a respective property for each column
     */
    TableDataSet.prototype.getRow = function(rowIndex) {
        var row = {};
        this.getColumns().forEach(function(col) {
            row[col.getName() /*.toUpperCase()*/ ] = col.getRow(rowIndex);
        });
        return row;
    };

    /**
     * @private
     * @method deleteRow
     * @memberof! module:tableDataSet~TableDataSet.prototype
     */
    TableDataSet.prototype.deleteRow = function(rowIndex) {
        var row = {};
        this.getColumns().forEach(function(col) {
            row[col.getName() /*.toUpperCase()*/ ] = col.deleteRow(rowIndex);
        });
        return row;
    };

    /**
     * Returns a copy of the table data set.
     *
     * @private
     * @method clone
     * @memberof! module:tableDataSet~TableDataSet.prototype
     * @returns {module:tableDataSet~TableDataSet} a new TableDataSet
     */
    TableDataSet.prototype.clone = function() {
        var clonedSet = new TableDataSet();
        this.getColumns().forEach(function(col) {
            clonedSet.addColumn(col.clone());
        });
        return clonedSet;
    };

    /**
     * Returns a copy of the table data set with a filtered list of columns.
     *
     * @private
     * @method filterColumns
     * @memberof! module:tableDataSet~TableDataSet.prototype
     * @returns {TableDataSet}
     */
    TableDataSet.prototype.filterColumns = function(predicate) {
        var filteredSet = new TableDataSet();
        this.getColumns().filter(predicate).forEach(function(col) {
            filteredSet.addColumn(col.clone());
        });
        return filteredSet;
    };

    /**
     * Checks whether each column contains the same number of values.
     *
     * @private
     * @returns {Boolean} true when all columns has the same count of entries
     */
    TableDataSet.prototype.hasSameRowSize = function() {
        var size = this.getRowCount();
        return this.getColumns().every(function(col) {
            return size === col.getRowCount();
        });
    };

    /**
     * Checks whether the data contains undefined column values.
     *
     * @private
     * @returns {Boolean} true when undefined values are contained
     */
    TableDataSet.prototype.containsUndefinedValues = function() {
        return this.getColumns().some(function(col) {
            return col.getRows().some(function(row) {
                return row === undefined;
            });
        });
    };

    /**
     * Checks whether each row has a value for each column.
     *
     * @method isWellFormed
     * @memberof! module:tableDataSet~TableDataSet.prototype
     * @returns {Boolean} true when the table data set is well formed.
     */
    TableDataSet.prototype.isWellFormed = function() {
        return this.hasSameRowSize() && !this.containsUndefinedValues();
    };

    function ColumnDataSet(metaData, getterName, colIndex) {
        this.metaData = metaData;
        this.getter = getterName;
		this.colIndex = colIndex;
        this.rows = [];
    }

    ColumnDataSet.prototype.getName = function() {
        return this.metaData.ColumnLabel;
    };

    ColumnDataSet.prototype.toString = function() {
        return this.getName();
    };

    ColumnDataSet.prototype.getTypeName = function() {
        return this.metaData.ColumnTypeName;
    };

    ColumnDataSet.prototype.getType = function() {
        return this.metaData.ColumnType;
    };

    ColumnDataSet.prototype.getRows = function() {
        return this.rows;
    };

    ColumnDataSet.prototype.getRowCount = function() {
        return this.rows.length;
    };

    ColumnDataSet.prototype.getRow = function(rowIndex) {
        return this.rows[rowIndex];
    };

    ColumnDataSet.prototype.addRow = function(row) {
        this.rows.push(row);
    };

    ColumnDataSet.prototype.deleteRow = function(rowIndex) {
        return this.rows.splice(rowIndex, 1)[0];
    };

    ColumnDataSet.prototype.clone = function() {
        var clonedSet = new ColumnDataSet(this.metaData, this.getter, this.colIndex);
        clonedSet.rows = this.rows.slice(0);
        return clonedSet;
    };

    function createColumn(metaData, columnIndex) {
        var colMetaData = {};
		metadataFunctions.forEach( function(metadataFunction){
			 var propName = metadataFunction.replace(/^(get|is)(.*)/, '$2')

        
             if(metaData[metadataFunction]){
                colMetaData[ propName ] = metaData[ metadataFunction ].call( metaData , columnIndex)   
             }
		});
        metaDataExtractor.applyMappings(metaData, colMetaData, columnIndex);
		
        
        var getterName = getGetterForType(colMetaData.ColumnTypeName)
		return new ColumnDataSet(colMetaData, getterName, columnIndex)
    }

    function createColumns(dataSet, rsMetaData) {
        var i;
        for (i = 1; i <= rsMetaData.getColumnCount(); ++i) {
            dataSet.addColumn(createColumn(rsMetaData, i));
        }
    }

    
    function createDbColumns(dataSet, rsMetaData) {
        
        rsMetaData._columns.forEach(function(column, index) {
           dataSet.addColumn(new ColumnDataSet({
               ColumnLabel: column.columnDisplayName || column.columnName || ("Column #" + (index + 1)),
               ColumnType: column.dataType,
               ColumnTypeName: typeCodeMapping[column.dataType],
               Precision: column.length | 0, 
               Scale: column.fraction | 0,
               ColumnDisplaySize: column.length | 0,
               TableName: column.tableName
           }, getGetterForType( typeCodeMapping[column.dataType]), index + 1));
        });
    }
    
    
    
    function createHdbColumns(dataSet, rsMetaData) {
        
        rsMetaData.forEach(function(column, index){
            dataSet.addColumn(new ColumnDataSet({
                ColumnLabel: column.columnDisplayName || column.columnName || ("Column #" + (index + 1)),
                ColumnType: column.dataType,
                ColumnTypeName: typeCodeMapping[column.dataType]
            }, null));
        });
        
    }
    
    
    
    function importData(dataSet, resultSet) {
        function addToCol(col) {
            col.addRow( resultSet[ col.getter ](col.colIndex))
        }
        var columns = dataSet.getColumns();
        while (resultSet.next()) {
            columns.forEach(addToCol);
        }
    }

    
    function importHdbData(dataSet, resultSet) {
        var columns = dataSet.getColumns();
        
        resultSet.forEach(function(row) {
           columns.forEach(function(col) {
               col.addRow(row[col.metaData.ColumnLabel]);  
           });
        });
        
    }
    
    
    /*function importRow(dataSet, row) {
		Object.keys(row).forEach(function(colName) {
			var column = dataSet.getColumn(colName);
			column.addRow(row[colName]);
		});
	}*/

    function createColumnFromData(columnName, values) {
        var column = new ColumnDataSet({
            ColumnLabel: columnName /*.toUpperCase()*/ ,
            ColumnType: null,
            ColumnTypeName: null
        }, null);
        if (!Array.isArray(values)) {
            column.rows.push(values); //insert single value
        } else {
            column.rows = values;
        }
        return column;
    }

    /**
     * Creates a table data set out of a ResultSet.
     *
     * @example
     *
     * <pre>
     * var tableDataSetLib = $.import('sap.hana.testtools.unit.util', 'tableDataSet');
     *
     * var statement = null;
     * var resultSet = null;
     * try {
     *     statement = this.dbConnection.prepareStatement(&quot;select 1 as Id, 'B' as col2 from dummy&quot;);
     *     resultSet = statement.executeQuery();
     *     var tableDataSet = tableDataSetLib.createFromResultSet(resultSet);
     *     checkTableDataSet(tableDataSet, 1, 2);
     * } finally {
     *     if (resultSet) {
     *         resultSet.close();
     *     }
     *     if (statement) {
     *         statement.close();
     *     }
     * }
     * </pre>
     *
     * @param {$.db.ResultSet}
     *            resultSet database result set
     *
     * @returns {module:tableDataSet~TableDataSet} table data set that contains the data of the resultSet
     */
    function createFromResultSet(resultSet) {
        var dataSet = new TableDataSet();
        if(resultSet.metadata) {
            createHdbColumns(dataSet, resultSet.metadata);
            importHdbData(dataSet, resultSet);
        } else {
            createDbColumns(dataSet, resultSet.getMetaData());
            importData(dataSet, resultSet);    
        }
        return dataSet;
    };

    /**
     * Creates a table data set out of a json.
     *
     * @example
     *
     * <pre>
     * var tableDataSetLib = $.import('sap.hana.testtools.unit.util', 'tableDataSet');
     *
     * // the table data has three columns 'Id', 'col2' and 'COL3' with three rows.
     * var dataAsJSON = {
     *     'Id' : [ 1, 2, 3 ],
     *     'col2' : [ 'A', 'B', 'C' ],
     *     'COL3' : [ 1.0, 2.0, 3.0 ]
     * };
     * var tableDataSet = tableDataSetLib.createFromJSON(dataAsJSON);
     * </pre>
     *
     * <pre>
     * var tableDataSet = tableDataSetLib.createFromJSON({'Id' : 1, 'col2' : 'A', 'COL3' : 1.0});
     * </pre>
     *
     * @param {Object}
     *            json each property contains a set of values
     * @returns {module:tableDataSet~TableDataSet} table data set that contains the data of the json
     */
    function createFromJSON(json) {
        var dataSet = new TableDataSet();
        Object.keys(json).forEach(function(columnName) {
            dataSet.addColumn(createColumnFromData(columnName, json[columnName]));
        });
        if (!dataSet.isWellFormed()) {
            throw new Error("dataset has mismatching column sizes");
        }
        return dataSet;
    };

    /**
     * Creates a table data set out of an array.
     *
     * @example
     *
     * <pre>
     * var tableDataSetLib = $.import('sap.hana.testtools.unit.util', 'tableDataSet');
     *
     * // the table data has three columns 'Id', 'col2' and 'COL3' with three rows.
     * var dataAsArray = [ {
     *     'Id' : 1,
     *     'col2' : 'A',
     *     'COL3' : 1.0
     * }, {
     *     'Id' : 2,
     *     'col2' : 'B',
     *     'COL3' : 2.0
     * }, {
     *     'Id' : 3,
     *     'col2' : 'C',
     *     'COL3' : 3.0
     * } ];
     * var tableDataSet = tableDataSetLib.createFromArray(dataAsArray);
     * </pre>
     *
     * @param {Array}
     *            rows array of rows
     * @returns {module:tableDataSet~TableDataSet} table data set that contains the data of the array
     */
    function createFromArray(rows) {
        var dataSet = new TableDataSet();
        var isFirstRow = true;
        rows.forEach(function(row) {
            Object.keys(row).forEach(function(columnName) {
                var column = null;
                if (isFirstRow) {
                    column = createColumnFromData(columnName, []);
                    dataSet.addColumn(column);
                } else {
                    column = dataSet.getColumn(columnName);
                }
                if (column) {
                    column.addRow(row[columnName]);
                }
            });
            isFirstRow = false;
        });
        if (!dataSet.isWellFormed()) {
            throw new Error("dataset contains undefined values");
        }
        return dataSet;
    };
    
    /**
     * Creates a table data set out of an array of comma-separated-value list.
     *
     * @example
     *
     * <pre>
     * var tableDataSetLib = $.import('sap.hana.testtools.unit.util', 'tableDataSet');
     *
     * // the table data has three columns 'Id', 'col2' and 'COL3' with three rows.
     * var dataAsCSVArray = [['Id', 'col2', 'COL3'],
		                     [1, 'A', '1.0'],
		                     [2, 'B', '2.0'],
		                     [3, 'C', '3.0']];
     * var tableDataSet = tableDataSetLib.createFromCSVList(dataAsCSVArray, true);
     * </pre>
     *
     * @param {Array}
     *            csvList array of comma separated values
     * @param {Boolean}  
     *            containsHeaderLine true when the first line contains the name of columns         
     * @returns {module:tableDataSet~TableDataSet} table data set that contains the data of the csv list
     */
    function createFromCSVList(csvList, containsHeaderLine) {
        var dataSet = new TableDataSet();
        var startIndex = 0;
        var rowIndex = 0;
        var columnValue = '';

        if (containsHeaderLine) {
            startIndex = 1;
        }

        csvList[0].forEach(function(col, colIndex) {
            var columnName = containsHeaderLine ? col : colIndex;
            var column = createColumnFromData(columnName, []);
	        
	        for (rowIndex = startIndex; rowIndex < csvList.length; rowIndex++) {
                columnValue = csvList[rowIndex][colIndex];
                column.addRow(columnValue);
            }
            
            dataSet.addColumn(column);
        });
        
        if (!dataSet.isWellFormed()) {
            throw new Error("dataset contains undefined values");
        }
        return dataSet;
    };

    /**
     * Checks whether the passed object is a TableDataSet instance.
     *
     * @param {Object}
     *            obj any object
     * @returns {Boolean} true if passed object is a TableDataSet instance
     */
    function isTableDataSet(obj) {
        return obj instanceof TableDataSet
    }

function isResultSet(obj) {
    return obj instanceof ResultSet
}

function createDataSet(src){
    if(!src ){
        new Error('Cannot create TableDataSet fron null/undefined')
    }

    if (isTableDataSet(src)) {
        return src
    }
    if (isResultSet(src)) {
        return createFromResultSet(src)
    }
    if (Array.isArray(src)) {
        return createFromArray(src)
    }
    if (typeof src ==='object') {
        return createFromJSON(src)
    }
    throw new Error('Invalid data specification ' + src + ' for TableDataSet')
}

module.exports = {
	TableDataSet: TableDataSet,
	createFromResultSet : createFromResultSet,
	createFromJSON :createFromJSON,
	createFromArray :createFromArray,
	createFromCSVList : createFromCSVList,
	isTableDataSet : isTableDataSet,
    createDataSet : createDataSet
}
