/*jslint nomen:true*/
/**
 * @private
 * @param physicalSchema
 *            the schema the HANA object belongs to, which is physically there
 */
var HanaObjectName = function(physicalSchema, name) {
	var HanaObjectTypes = $.import("sap.hana.testtools.mockstar", "hanaObjectTypes").HanaObjectTypes;
	var TruncOptions = $.import("sap.hana.testtools.mockstar", "truncOptions").TruncOptions;

	this._name = name;
	this._physicalSchema = physicalSchema;
	this._schema = null;

	var parseName = function() {
		return HanaObjectName.parseName(name);
	};

	this.getName = function() {
		return name;
	};

	/**
	 * The schema, which is defined in the dependency substitution rule, could be the authoring schema
	 * 
	 * @private
	 */
	this.setSchema = function(schema) {
		this._schema = schema;
	};

	/**
	 * @private
	 * @returns schema the schema that is defined in the dependency substitution rule (possibly the authoring schema) or if not defined the physical schema.
	 */
	this.getSchema = function() {
		return this._schema || this.getPhysicalSchema();
	};

	this.getPhysicalSchema = function() {
		return physicalSchema;
	};

	this.getParsedName = function() {
		var parsedName = parseName(name);
		return {
			schemaName : this.getSchema(),
			packageName : parsedName.packageName,
			objectName : parsedName.objectName
		};
	};

	this.equals = function(otherHanaObjectName) {
		return this.match(otherHanaObjectName.getPhysicalSchema(), otherHanaObjectName.getName());
	};

	this.match = function(otherSchema, otherName) {
		return this.getPhysicalSchema() === otherSchema && this.getName() === otherName;
	};

	this.clone = function() {
		var clone = new HanaObjectName(physicalSchema, name);
		clone.setSchema(this.getSchema());
		return clone();
	};

	this.toString = function() {
		return '"' + this.getPhysicalSchema() + '"."' + this.getName() + '"';
	};

	this.getRuntimeName = function(type) {
		switch (type) {
		case HanaObjectTypes.ODATA:
			return "/" + name.replace(".", "/", "g") + ".xsodata";
		case HanaObjectTypes.HDBPROCEDURE:
			return '"' + this.getPhysicalSchema() + '"."' + this.getName().replace("/", "::") + '"';
		default:
			return this.toString();
		}
	};

	this.getNameWithTargetPackage = function(targetPackageName, truncOption) {
		var newName = targetPackageName + "." + name;
		if (truncOption === TruncOptions.FULL) {
			var packageName = this.getParsedName().packageName;
			if (packageName) {
				newName = name.replace(packageName, targetPackageName);
			}
		}
		return newName;
	};
};

HanaObjectName.parseName = function(name) {
	var parsed = {
		packageName : "",
		objectName : name
	};

	var match = name.match(/^([^:\/]+)(?:::|\/)(.+)$/);
	if (match) {
		parsed.packageName = match[1];
		parsed.objectName = match[2];
	}

	return parsed;
};
