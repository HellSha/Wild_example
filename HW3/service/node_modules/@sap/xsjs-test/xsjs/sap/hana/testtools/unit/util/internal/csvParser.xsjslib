var csvToArrays = null;
var csvToObjects = null;

(function() {

	var repository = new ($.import("sap.hana.testtools.unit.util.internal", "repository").Repository)();
	var RepositoryPath = $.import("sap.hana.testtools.unit.util.internal", "repositoryPath").RepositoryPath;
	var csv = $.import("sap.hana.testtools.unit.util.internal", "jquery_csv").csv;

	function trimSpaces(value, all) {
		if (all) {
			return value.replace(/\s+/g, '');
		} else {
			return value.replace(/^\s+/, '').replace(/\s+$/, '');
		}
	}

	function cleanseNumber(value, decSeparator) {
		var parts = repository.splitAtLast(value, decSeparator);
		parts.base = parts.base.replace(/[,\.]/, '');
		return parts.base + (parts.suffix ? '.' : '') + parts.suffix;
	}

	var currData = {};

	function parseValue(value, state) {
		var retVal = value;
		var numRegExp = /^[.,\s\d]+$/;
		// remove leading and trailing spaces for column names
		// to avoid problems when accessing object values
		if (state.rowNum === 1 && currData.options && currData.options.headers) {
			currData.colCnt++;
			retVal = trimSpaces(value);
			if (retVal === '') {
				currData.skipCols.push(state.colNum);
				return false;
			}
		} else if (currData.skipCols.indexOf(state.colNum % currData.colCnt) !== -1) {
			return false;
		} else if (currData.options && currData.options.castToScalar && numRegExp.test(value)) {
			retVal = trimSpaces(value, true);
			if (currData.options.decSeparator) {
				retVal = cleanseNumber(retVal, currData.options.decSeparator);
			}
			retVal = csv.hooks.castToScalar(retVal);
		}
		return retVal;
	}

	/**
	 * Converts a CSV file to a JavaScript array. This method deals with multi-line CSV. The breakdown is simple. The first dimension of the array represents
	 * the line (or entry/row) while the second dimension contains the values (or values/columns).
	 * 
	 * @param {String}
	 *            packageName The package containing the CSV file
	 * @param {String}
	 *            name The name of the CSV file e.g. 'MyCSVFile.csv'
	 * @param {Object}
	 *            [userOptions] An object containing user-defined options
	 * 
	 * <pre>
	 *   var options = { 
	 *      separator : ';',
	 *      headers : true
	 *  }
	 * </pre>
	 * 
	 * separator: An override for the separator character. Defaults to a comma(,) headers: Indicates whether the data contains a header line that should be
	 * removed from the result. Defaults to false<br />
	 * @private
	 * 
	 */
	csvToArrays = function(packageName, name, userOptions) {
		var defaultOptions = {
			separator : ',',
		};
		var options = defaultOptions;

		if (userOptions) {
			options.separator = userOptions.separator;
		}
		
		var objectCData = repository.readFile(RepositoryPath.fromPackageAndFilename(packageName, name));
		if (!/\n$/.test(objectCData)) {
            objectCData += "\n";
		}
		return csv.toArrays(objectCData, options);
	};

	/**
	 * Converts a CSV file to a JavaScript object. This method deals with multi-line CSV. Where the headers line is used as the key for each value per entry.
	 * 
	 * @param {String}
	 *            packageName The package containing the CSV file
	 * @param {String}
	 *            name The name of the CSV file e.g. 'MyCSVFile.csv'
	 * @param {Object}
	 *            [userOptions] An object containing user-defined options
	 * 
	 * <pre>
	 * var option = {
	 *     separator : ',',
	 *     headers : true,
	 *     decSeparator : '.'
	 * }
	 * </pre>
	 * 
	 * separator: An override for the separator character. Defaults to a comma (,)<br />
	 * headers: Indicates whether the data contains a header line. Defaults to true<br />
	 * decSeparator: An override for the decimal separator character. Defaults to a dot (.)
	 * 
	 * @private
	 */
	csvToObjects = function(packageName, name, userOptions) {
		var defaultOptions = {
			separator : ',',
			headers : true,
			decSeparator : '.'
		};
		currData = {
			options : defaultOptions,
			skipCols : [],
			colCnt : 0
		};
		if (userOptions) {
			currData.options.separator = userOptions.separator || currData.options.separator;
			currData.options.headers = userOptions.headers !== undefined ? userOptions.headers : currData.options.headers;
			currData.options.decSeparator = userOptions.decSeparator || currData.options.decSeparator;
			currData.options.onParseValue = parseValue;
		}
		var objectCData = repository.readFile(RepositoryPath.fromPackageAndFilename(packageName, name));
		if (!/\n$/.test(objectCData)) {
            objectCData += "\n";
		}
		return csv.toObjects(objectCData, currData.options);
	};

}());
