function GraphicCalcViewDependencySubstitutor() {

	var HanaObjectTypes = $.import("sap.hana.testtools.mockstar",
			"hanaObjectTypes").HanaObjectTypes;

	// var anyCharacterExceptLineBreak = ".";
	// var lineBreakCharacters = [ "\r", "\n", "\u0085", "\u2028", "\u2029" ];
	var anyCharacter = "(?:.|\\s)"; // anyCharacterExceptLineBreak + "|" +
									// lineBreakCharacters.join("|");
	var regexAnyCharactersIncludingLineBreak = "(" + anyCharacter + "*?)";

	var dataSourceTag = '<DataSource id="[^"]*" type="[^"]*"'
			+ regexAnyCharactersIncludingLineBreak + '</DataSource>';
	var dataSourceTagRegExp = new RegExp(dataSourceTag, "g");
	var logicalModelTag = '<logicalModel id="[^"]*">'
			+ regexAnyCharactersIncludingLineBreak + '</logicalModel>';
	var logicalModelTagRegExp = new RegExp(logicalModelTag, "g");
	var variableMappingsTag = '<variableMappings>'
			+ regexAnyCharactersIncludingLineBreak + '</variableMappings>';
	var variableMappingsTagRegExp = new RegExp(variableMappingsTag, "g");

	function replaceTypeInDataSourceTag(match, dependency) {
		if (!dependency.type.equals(dependency.oldType)) {
			match = match.replace(new RegExp('type="[^"]*"', "g"),
					'type="DATA_BASE_TABLE"');
		}
		return match;
	}

	function getSearchColumnObjectTag(dependencyLocation, dependencyType) {
		if (dependencyType.isTableType()) {
			return '<columnObject schemaName="'
					+ dependencyLocation.getSchema() + '" columnObjectName="'
					+ dependencyLocation.getName() + '"'; // when an alias is
															// used
		} else {
			var parsedDependencyName = dependencyLocation.getParsedName();
			if (dependencyType.isOfType(HanaObjectTypes.CALCULATION_VIEW)) {
				return "<resourceUri>/" + parsedDependencyName.packageName
						+ "/calculationviews/"
						+ parsedDependencyName.objectName + "</resourceUri>";
			} else if (dependencyType.isOfType(HanaObjectTypes.ANALYTIC_VIEW)) {
				return "<resourceUri>/" + parsedDependencyName.packageName
						+ "/analyticviews/" + parsedDependencyName.objectName
						+ "</resourceUri>";
			}
			throw new Error(dependencyLocation + " is of unexpected type "
					+ dependencyType);
		}
	}

	function replaceColumnObjectTagWithColumObjectTag(match, originalLocation,
			substituteLocation) {
		var originalTag = '<columnObject schemaName="'
				+ originalLocation.getSchema() + '" columnObjectName="'
				+ originalLocation.getName() + '"(.*)?/>';

		var substituteTag = '<columnObject schemaName="'
				+ substituteLocation.getSchema() + '" columnObjectName="'
				+ substituteLocation.getName() + '"$1/>';
		return match.replace(new RegExp(originalTag, "g"), substituteTag);
	}

	function getColumnObjectTag(dependencyLocation, dependencyType) {
		var tag = getSearchColumnObjectTag(dependencyLocation, dependencyType);
		if (dependencyType.isTableType()) {
			return tag + '/>';
		}
		return tag;
	}

	function replaceDependencyInColumnObjectTag(match, dependency) {
		if (dependency.type.equals(dependency.oldType) && dependency.isTable()) {
			return replaceColumnObjectTagWithColumObjectTag(match,
					dependency.oldLocation, dependency.location);
		}
		var originalTag = getColumnObjectTag(dependency.oldLocation,
				dependency.oldType);
		var substituteTag = getColumnObjectTag(dependency.location,
				dependency.type);
		return match.replace(originalTag, substituteTag);
	}

	function replaceDependencyInDataSourceTag(match, dependency) {
		var searchColumnObjectTag = getSearchColumnObjectTag(
				dependency.oldLocation, dependency.oldType);
		if (match.indexOf(searchColumnObjectTag) !== -1) {
			match = replaceTypeInDataSourceTag(match, dependency);
			match = replaceDependencyInColumnObjectTag(match, dependency);
		}
		return match;
	}

	function getKeyMappingTag(dependencyLocation) {
		return '<keyMapping schemaName="' + dependencyLocation.getSchema()
				+ '" columnObjectName="' + dependencyLocation.getName() + '"';
	}

	function replaceDependencyInKeyMappingTag(match, dependency) {
		var originalTag = getKeyMappingTag(dependency.oldLocation);
		var substituteTag = getKeyMappingTag(dependency.location);
		return match.replace(new RegExp(originalTag, "g"), substituteTag);
	}

	function getMeasureMappingTag(dependencyLocation) {
		return '<measureMapping schemaName="' + dependencyLocation.getSchema()
				+ '" columnObjectName="' + dependencyLocation.getName() + '"';
	}

	function replaceDependencyInMeasureMappingTag(match, dependency) {
		var originalTag = getMeasureMappingTag(dependency.oldLocation);
		var substituteTag = getMeasureMappingTag(dependency.location);
		return match.replace(new RegExp(originalTag, "g"), substituteTag);
	}

	function replaceDependencyInLogicalModelTag(match, dependency) {
		var searchKeyMappingTag = getKeyMappingTag(dependency.oldLocation);

		if (match.indexOf(searchKeyMappingTag) !== -1) {
			match = replaceDependencyInKeyMappingTag(match, dependency);
		}
		var searchMeasureMappingTag = getMeasureMappingTag(dependency.oldLocation);
		if (match.indexOf(searchMeasureMappingTag) !== -1) {
			match = replaceDependencyInMeasureMappingTag(match, dependency);
		}
		return match;
	}

	// ----Variable Mapping
	function getResourceUri(viewDependencyLocation, viewType) {
		var parsedDependencyName = viewDependencyLocation.getParsedName();
		var resourceUri = "";
		if (viewType.isOfType(HanaObjectTypes.CALCULATION_VIEW)) {
			resourceUri = parsedDependencyName.packageName
					+ "/calculationviews/" + parsedDependencyName.objectName;
		} else if (viewType.isOfType(HanaObjectTypes.ANALYTIC_VIEW)) {
			resourceUri = parsedDependencyName.packageName + "/analyticviews/"
					+ parsedDependencyName.objectName;
		} else {
			throw new Error(viewDependencyLocation + " is of unexpected type "
					+ viewType);
		}
		return 'resourceUri="/' + resourceUri + '"';
	}

	function getVariableMappingTag(viewDependencyLocation, viewType) {
		return '<mapping' + regexAnyCharactersIncludingLineBreak
				+ getResourceUri(viewDependencyLocation, viewType)
				+ regexAnyCharactersIncludingLineBreak + '</mapping>';
	}

	function replaceDependencyInVariableMappingsTag(match, dependency) {
		if (dependency.wasTable()) {
			return match;
		} else if (dependency.isTable()) {
			// delete all mapping tags for the view to be replaced by a table
			var variableMappingTag = getVariableMappingTag(
					dependency.oldLocation, dependency.oldType);
			return match.replace(new RegExp(variableMappingTag, "g"), '');
		} else {
			// replaces value of the resourceUri tag
			var resourceUri_oldView = getResourceUri(dependency.oldLocation,
					dependency.oldType);
			var resourceUri_newView = getResourceUri(dependency.location,
					dependency.type);
			return match.replace(new RegExp(resourceUri_oldView, "g"),
					resourceUri_newView);
		}
	}

	function replaceReferenceForDependency(hanaObject, dependency) {
		hanaObject.cdata = hanaObject.cdata.replace(dataSourceTagRegExp,
				function(match) {
					return replaceDependencyInDataSourceTag(match, dependency);
				});
		hanaObject.cdata = hanaObject.cdata
				.replace(logicalModelTagRegExp,
						function(match) {
							return replaceDependencyInLogicalModelTag(match,
									dependency);
						});
		hanaObject.cdata = hanaObject.cdata.replace(variableMappingsTagRegExp,
				function(match) {
					return replaceDependencyInVariableMappingsTag(match,
							dependency);
				});
	}

	this.execute = function(hanaObject) {
		hanaObject.getObjectDependencies().forEach(
				replaceReferenceForDependency.bind(null, hanaObject));
	};
}
