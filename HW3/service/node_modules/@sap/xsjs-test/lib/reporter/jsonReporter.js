

	function sum(a, b) {
		return a + b;
	}

	function ResultsNode() {
		return;
	}
	ResultsNode.prototype.writeFailures = function() {
		return 0;
	};

	function SpecNode() {
		this.name = "";
		this.time = 0;
		this.timestamp = new Date();
		this.fails = [];
		this.failures = 0;
	}
	SpecNode.prototype = Object.create(ResultsNode.prototype);
	SpecNode.prototype.constructor = SpecNode;
	SpecNode.prototype.writeFailures = function() {
		this.failures = this.fails.length;
		return this.fails.length;
	};

	function SuiteNode() {
		this.name = "";
		this.errors = 0;
		this.failures = 0;
		this.time = 0;
		this.timestamp = new Date();
		this.suites = [];
		this.specs = [];
	}
	SuiteNode.prototype = Object.create(ResultsNode.prototype);
	SuiteNode.prototype.constructor = SuiteNode;
	SuiteNode.prototype.writeFailures = function() {
		this.failures = this.suites.map(Function.call.bind(SuiteNode.prototype.writeFailures)).reduce(sum, 0);
		this.failures += this.specs.map(Function.call.bind(SpecNode.prototype.writeFailures)).reduce(sum, 0);
		return this.failures;
	};

	function RootNode() {
		this.user = "";
		this.failures = 0;
		this.time = 0;
		this.timestamp = new Date();
		this.suites = [];
	}
	RootNode.prototype = Object.create(ResultsNode.prototype);
	RootNode.prototype.constructor = RootNode;
	RootNode.prototype.writeFailures = function() {
		this.failures = this.suites.map(Function.call.bind(SuiteNode.prototype.writeFailures)).reduce(sum, 0);
		return this.failures;
	};

	function JsonReporter(options,jasmineInterface){
        this.jasmineInterface = jasmineInterface
        var jasmine = jasmineInterface.jasmine
		this.type = "json"

		this.output = new RootNode()
    this.output.user = (options.hana && options.hana.user) || '';
		this.suiteStack = [ this.output ]

		this.timer = new jasmine.Timer()
	};

    JsonReporter.prototype.getCurrentSuite = function() {
		return this.suiteStack.length > 0 ? this.suiteStack[this.suiteStack.length - 1] : null;
	};

    JsonReporter.prototype.initialize = function() {
		//this.output.user = $.session.getUsername().toUpperCase()
	}

    JsonReporter.prototype.specStarted = function(result) {
        var jasmine = this.jasmineInterface.jasmine
		result.node = new SpecNode();
		result.node.name = result.description;

		this.getCurrentSuite().specs.push(result.node);

		if (!result.timer) {
			result.timer = new jasmine.Timer();
		}
		result.timer.start();
	};

	function getResourceInfo(result) {
		if (!result.testResource || !result.testResource.file) {
			return null;
		}

		var params = {
			uri : result.testResource.file.replace(/^\//, '')
		};
		if (result.testResource.line) {
			params.line = result.testResource.line;
		}
		return params;
	}


    JsonReporter.prototype.specDone = function(result) {
		var elapsedTime = result.timer.elapsed()

		result.node.failures = result.failedExpectations

		result.node.time = elapsedTime / 1000
		result.node.timestamp = result.timer.startTime;
        result.node.resource = {
            uri : result.__resource.filename,
            line : result.__resource.linenr
        }
	};

    JsonReporter.prototype.suiteStarted = function(result) {
        var jasmine = this.jasmineInterface.jasmine
		result.node = new SuiteNode();
		result.node.name = result.description;

		this.getCurrentSuite().suites.push(result.node);
		this.suiteStack.push(result.node);

		if (!result.timer) {
			result.timer = new jasmine.Timer();
		}
		result.timer.start();
	};

    JsonReporter.prototype.suiteDone = function(result) {

		if (this.suiteStack.indexOf(result.node) !== -1) {
			var droppedSuites = 0;
			while (this.suiteStack.pop() !== result.node) {
				++droppedSuites;
			}
			if (droppedSuites > 0) {
				if (this.reportWarning) {
					this.reportWarning(droppedSuites + " suite" + (droppedSuites === 1 ? "" : "s") + " did not finish properly");
				}
			}
		}

		result.node.name = result.description
		result.node.errors = 0
		result.node.time = result.timer.elapsed() / 1000
		result.node.timestamp = result.timer.startTime
	}

    JsonReporter.prototype.jasmineStarted = function(options) {
		if (options.userName !== undefined) {
			this.output.user = options.userName;
		}

		if (options.timer) {
			this.timer = options.timer;
		}
		this.timer.start();
	};

    JsonReporter.prototype.jasmineDone = function() {
		var elapsedTime = this.timer.elapsed()

		var droppedSuites = this.suiteStack.length - 1;
		if (droppedSuites > 0) {
			if (this.reportWarning) {
				this.reportWarning(droppedSuites + " suite" + (droppedSuites === 1 ? "" : "s") + " did not finish properly");
			}
		}

		this.output.writeFailures();
		this.output.time = elapsedTime / 1000
		this.output.timestamp = this.timer.startTime;
	};

    JsonReporter.prototype.reportStatus = function(status) {
		var output = {};

		switch (status.toUpperCase()) {
		case "PREPARED":
			output.status = status;
			break;
		case "STARTED":
			output.status = status;
			break;
		default:
			throw new Error("unknown status '" + status + "'");
		}

		this.output = output;
	};

    JsonReporter.prototype.log = function(str) {
		/*jslint unparam:true*/
		/*
		 * var console = jasmine.getGlobal().console;
		 *
		 * if (console && console.log) { console.log(str); }
		 */
		return;
	};

    JsonReporter.prototype.getResults = function(prettyprint) {
        //return JSON.stringify(this.output, null, prettyprint ? "  " : "");
        return JSON.stringify(this.output, null, 2);
	};

    JsonReporter.prototype.getContentType = function() {
		return "application/json";
	};



module.exports =JsonReporter
