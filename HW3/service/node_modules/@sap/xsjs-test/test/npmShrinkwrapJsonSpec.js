var fs = require("fs");
var path = require("path");

var expect = require('expect.js');

describe("npm-shrinkwrap.json tests", function () {
    it("does not contain invalid attributes", function (done) {
        var npmShrinkwrapPath = path.join(__dirname, "..", "npm-shrinkwrap.json");

        fs.readFile(npmShrinkwrapPath, "utf8", function (oErr, sData) {
            if (oErr) {
                throw oErr;
            }

            if (!sData || sData === "") {
                throw new Error("npm-shrinkwrap.json is empty");
            }

            var split = sData.split("\n");
            var regExpResolved = /^\s*"(resolved|from|dev)"/i;
            var invalidAttributeLines = [];

            for (var i = 0; i < split.length; i++) {
                if (regExpResolved.exec(split[i])) {
                    invalidAttributeLines.push(i + 1);
                }
            }

            if (invalidAttributeLines.length > 0) {
                var errorMessage = "npm-shrinwrap.json contains invalid attributes.\n" +
                    "For more details, see wdf/wiki/display/xs2/npm-shrinkwrap\n" +
                    "Found " + invalidAttributeLines.length + " 'resolved', 'from', or 'dev' occurrence/s " +
                    "in npm-shrinkwrap.json line/s (one based): " + invalidAttributeLines;

                throw new Error(errorMessage);
            }

            done();
        });
    });

    it("has the same version number in npm-shrinkwrap.json as in package.json", function () {
        var npmShrinkwrapJsonPath = path.join(__dirname, "..", "npm-shrinkwrap.json");
        var npmShrinkwrapJsonContent = fs.readFileSync(npmShrinkwrapJsonPath, "utf8");
        var npmShrinkwrapJson = JSON.parse(npmShrinkwrapJsonContent);

        var packageJsonPath = path.join(__dirname, "..", "package.json");
        var packageJsonContent = fs.readFileSync(packageJsonPath, "utf8");
        var packageJson = JSON.parse(packageJsonContent);

        expect(npmShrinkwrapJson.version).to.be(packageJson.version);
    });

});
