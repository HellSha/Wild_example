function DependencyHierarchyBuilder(repository) {

	var DependencyHierarchy = $.import("sap.hana.testtools.mockstar", "dependencyHierarchy").DependencyHierarchy;

	var allObjects = [];
	function takeObjectOrReuseExisting(hanaObject) {
		var i;
		for (i = 0; i < allObjects.length; i++) {
			if (hanaObject.equals(allObjects[i])) {
				return allObjects[i];
			}
		}
		allObjects.push(hanaObject);
		return hanaObject;
	}

	function readDependenciesAndAddTo(hanaObject, dependencySubstitutionRules) {
		if (!hanaObject.isTable() && !dependencySubstitutionRules.hasSubstitutionRuleFor(hanaObject)) {
			var hanaObjectDependencies = repository.getReferences(hanaObject.getName());
			$.trace.info("received dependencies for '" + hanaObject.toString() + "' from repository: " + hanaObjectDependencies.toString());

			hanaObjectDependencies.forEach(function(dependency) {
				var hanaObjectDependency = takeObjectOrReuseExisting(dependency);
				hanaObject.addFileDependency(hanaObjectDependency);
				readDependenciesAndAddTo(hanaObjectDependency, dependencySubstitutionRules);
			});
		}
	}

	this.buildHierarchyFor = function(modelPath, dependencySubstitutionRules) {
		var rootModel = repository.getModel(modelPath);
		readDependenciesAndAddTo(rootModel, dependencySubstitutionRules);
		return new DependencyHierarchy(rootModel);
	};

}
