// TODO avoid object creation
function DependencySubstitutionsConverter() {
	
	var regexpQuoted = '"([^"]+)"';
	var regexpPlain = "([A-Za-z_][A-Za-z0-9_]*)";
	var searchQuotedSchema = new RegExp("^" + regexpQuoted + "\\." + regexpPlain + "$");
	var searchQuotedName = new RegExp("^" + regexpPlain + "\\." + regexpQuoted + "$");
	var searchQuotedAll = new RegExp("^" + regexpQuoted + "\\." + regexpQuoted + "$");
	
	function splitQuotedIntoSchemaAndName(dependencyName) {
		var match = dependencyName.match(searchQuotedSchema) || dependencyName.match(searchQuotedName) || dependencyName.match(searchQuotedAll);
		if (!match) {
			throw new Error("invalid quoting of dependency name '" + dependencyName + "'");
		}
		return {
			schema : match[1],
			name : match[2]
		};
	}
	
	function isQuoted(str) {
		return str.indexOf('"') !== -1;
	}
	
	function isViewName(dependencyName) {
		return (/.\/./).test(dependencyName) && dependencyName.indexOf("./") === -1;
	}

	function splitIntoSchemaAndName(dependencyName) {
		var match = dependencyName.match(/^(?:([^\.]+)\.)?(.*)/);
		return {
			schema : match[1] || "",
			name : match[2]
		};
	}
	
	function unify(dependencyName, assumeTable) {
		if (typeof dependencyName === "string") {
			if (isQuoted(dependencyName)) {
				return splitQuotedIntoSchemaAndName(dependencyName);
			}
			if (!assumeTable && isViewName(dependencyName)) {
				return {
					schema : "_SYS_BIC",
					name : dependencyName
				};
			}
			return splitIntoSchemaAndName(dependencyName);
		}
		if (typeof dependencyName !== "object") {
			dependencyName = {};
		}
		return {
			schema : typeof dependencyName.schema === "string" ? dependencyName.schema : "",
			name : typeof dependencyName.name === "string" ? dependencyName.name : ""
		};
	}

	this.unifyAll = function(dependencySubstitutions) {
		if (!dependencySubstitutions) {
			dependencySubstitutions = [];
		}
		if (!Array.isArray(dependencySubstitutions)) {
			dependencySubstitutions = [ dependencySubstitutions ];
		}

		var unifiedSubstitutions = dependencySubstitutions.map(function(value) {
			return {
				original : unify(value.original),
				substitute : unify(value.substitute, true)
			};
		});		
		
		return unifiedSubstitutions;
	};
}