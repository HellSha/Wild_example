/*jslint nomen:true*/
var HanaObject = null;
var HanaObjectType = null;

(function() {

	var HanaObjectName = $.import("sap.hana.testtools.mockstar", "hanaObjectName").HanaObjectName;
	var HanaObjectType = $.import("sap.hana.testtools.mockstar", "hanaObjectType").HanaObjectType;
	var HanaObjectTypes = $.import("sap.hana.testtools.mockstar", "hanaObjectTypes").HanaObjectTypes;

	HanaObject = function(schema, name, type, cdata) {
		this.fileDependencies = [];
		this.entities = [];
		this.relocated = false;

		this.cdata = cdata;
		this.oldLocation = null;
		this.location = new HanaObjectName(schema, name);
		this.oldType = null;
		this.type = new HanaObjectType(type);
		this.nameSuffix = '';
		this._markedForDeletion = false;
	};

	HanaObject.prototype.addFileDependency = function(hanaObject) {
		$.trace.info("add dependency '" + hanaObject.toString() + "' to HANA object '" + this.toString() + "'");
		this.fileDependencies.push(hanaObject);
	};

	HanaObject.prototype.addFileDependencies = function(hanaObjects) {
		hanaObjects.forEach(this.addFileDependency.bind(this));
	};

	HanaObject.prototype.removeAllFileDependencies = function() {
		$.trace.info("remove all dependencies from HANA object '" + this.toString() + "'");
		this.fileDependencies = [];
	};

	HanaObject.prototype.getFileDependencies = function() {
		return this.fileDependencies;
	};

	HanaObject.prototype.hasFileDependencies = function() {
		return this.fileDependencies.length !== 0;
	};

	HanaObject.prototype.removeFileDependenciesMarkedForDeletion = function() {
		var newDependencies = [];
		var i;
		for (i = 0; i < this.fileDependencies.length; i++) {
			if (!this.fileDependencies[i]._markedForDeletion) {
				newDependencies.push(this.fileDependencies[i]);
			}
		}
		var me = this.toString();
		this.fileDependencies = this.fileDependencies.filter(function(dependency) {
			if (dependency._markedForDeletion) {
				$.trace.info("remove dependency '" + dependency.toString() + "' from HANA object '" + me + "'");
			}
			return !dependency._markedForDeletion;
		});
	};

	/**
	 * Returns all dependencies to the repository files or in case of a CDS file the CDS entities that has been passed via the dependencySubstitutionRules.
	 * 
	 * @private
	 */
	HanaObject.prototype.getObjectDependencies = function() {
		var dependencies = [];
		this.fileDependencies.forEach(function(fileDependency) {
			var dependencyType = fileDependency.isRelocated() ? fileDependency.oldType : fileDependency.type;
			if (fileDependency.entities.length > 0) {
				dependencies = dependencies.concat(fileDependency.entities);
			}
			if (!dependencyType.isOfType(HanaObjectTypes.HDBDD)) {
				dependencies.push(fileDependency);
			}
		});
		return dependencies;
	};

	HanaObject.prototype.markForDeletion = function() {
		$.trace.info("mark HANA object '" + this.toString() + "' for deletion");
		this._markedForDeletion = true;
	};

	HanaObject.prototype.addEntity = function(entityName, entityType, newSchema, newName, authoringSchemaName) {
		var entityObject = new HanaObject(this.getSchema(), entityName, entityType);
		entityObject.setAuthoringSchema(authoringSchemaName);
		if (newSchema && newName) { // hdbdd entity
			entityObject.replaceByTable(newSchema, newName, authoringSchemaName);
		}
		this.entities.push(entityObject);
	};

	// TODO check/merge also entities => in which context is called
	HanaObject.prototype.equals = function(otherObject) {
		if (otherObject instanceof HanaObject) {
			return this.location.equals(otherObject.location); // && this.type.equals(otherObject.type);
		}
		return false;
	};

	HanaObject.prototype.match = function(schema, name, type) {
		var nameMatches = this.location.match(schema, name);
		var typeMatches = type ? this.type.match(type) : true;
		return nameMatches && typeMatches;
	};
	
	/**
	 * This is the schema which is defined / used in the cdata and 
	 * which is defined for the dependency substitution rule within the test. 
	 */
	HanaObject.prototype.setAuthoringSchema = function(schemaName) {
		this.location.setSchema(schemaName);
	};

	function relocate(newSchemaName, newObjectName, newType) {
		if (this.isRelocated()) {
			throw new Error("this object already has been relocated");
		}

		this.oldType = this.type;
		this.oldLocation = this.location;

		this.type = new HanaObjectType(newType);
		this.location = new HanaObjectName(newSchemaName, newObjectName);

		this.relocated = true;
	}

	/**
	 * As the hanaObject has a dependency substitution rule, its name and schema has to be changed to the test table name.
	 * 
	 * @param testSchema
	 * @param testTableName
	 */
	HanaObject.prototype.replaceByTable = function(testSchema, testTableName, authoringSchemaName) {
		this.setAuthoringSchema(authoringSchemaName);
		relocate.call(this, testSchema, testTableName, HanaObjectTypes.TABLE);
	};

	/**
	 * Moves object to a target package
	 * 
	 * @param targetPackage
	 * @param truncOption
	 */
	HanaObject.prototype.moveToUserPackageAndSchema = function(targetPackage, truncOption) {
		var targetName = this.location.getNameWithTargetPackage(targetPackage, truncOption);
		var targetSchema = "_SYS_BIC";
		if (this.location.getPhysicalSchema() !== "_SYS_BIC") {
			targetSchema = $.session.getUsername().toUpperCase();
		}

		relocate.call(this, targetSchema, targetName, this.type.toString());

		this.entities.forEach(function(entity) {
			if (!entity.isRelocated()) {
				entity.moveToUserPackageAndSchema(targetPackage, truncOption);
			}
		});
	};

	HanaObject.prototype.isRelocated = function() {
		return this.relocated;
	};

	/* 
	 * HanaObjectName specific functions 
	 */
	HanaObject.prototype.getRuntimeName = function() {
		return this.location.getRuntimeName(this.type.toString());
	};

	HanaObject.prototype.getName = function() {
		return this.location.getName();
	};

	/**
	 * @returns schema	the schema that is defined in the dependency substitution rule 
	 * (possibly the authoring schema) or if not defined the physical schema.
	 */
	HanaObject.prototype.getSchema = function() {
		return this.location.getSchema();
	};

	HanaObject.prototype.getPhysicalSchema = function() {
		return this.location.getPhysicalSchema();
	};

	HanaObject.prototype.toString = function() {
		return this.location.toString();
	};

	/* 
	 * HanaObjectType specific functions 
	 */
	HanaObject.prototype.isTable = function() {
		return this.type.isTableType();
	};

	HanaObject.prototype.isProcedure = function() {
		return this.type.isProcedureType();
	};

	HanaObject.prototype.isView = function() {
		return this.type.isViewType();
	};

	HanaObject.prototype.wasTable = function() {
		if (!this.isRelocated()) {
			throw new Error("this object has not been relocated yet");
		}
		return this.oldType.isTableType();
	};

	HanaObject.prototype.wasProcedure = function() {
		if (!this.isRelocated()) {
			throw new Error("this object has not been relocated yet");
		}
		return this.oldType.isProcedureType();
	};

	HanaObject.prototype.wasView = function() {
		if (!this.isRelocated()) {
			throw new Error("this object has not been relocated yet");
		}
		return this.oldType.isViewType();
	};

}());
