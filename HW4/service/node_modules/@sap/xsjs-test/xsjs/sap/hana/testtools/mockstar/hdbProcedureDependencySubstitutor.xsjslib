function HdbProcedureDependencySubstitutor(sqlScriptDependencySubstitutor) {

	sqlScriptDependencySubstitutor.setQuote('"');

	function optionallyQuote(str, noQuoteStr) {
		return '(?:"' + str + '"|' + (noQuoteStr || str) + ')';
	}

	function determineDefaultSchema(hanaObject) {
		var findDefaultSchema = new RegExp("^[\\w\\s]*DEFAULT SCHEMA\\s+(" + optionallyQuote('[^"]+', "\\w+") + ")", "mi");
		var matches = hanaObject.cdata.match(findDefaultSchema);
		if (matches) {
			return matches[1].replace(/^"([^"]*)"$/, "$1");
		}
		return "";
	}

	function getProcedureDefinition(schemaName, packageName, objectName) {
		return 'PROCEDURE "' + schemaName + '"."' + packageName + '::' + objectName + '"';
	}
	
	function adaptHdbProcedureDefinition(hanaObject) {
		var oldName = hanaObject.oldLocation.getParsedName();
		var newName = hanaObject.location.getParsedName();
		var findOldProcedureName = new RegExp('^\\s*PROCEDURE\\s+' + optionallyQuote(oldName.schemaName) + '."[^"]*"', "i");
		hanaObject.cdata = hanaObject.cdata.replace(findOldProcedureName, getProcedureDefinition(newName.schemaName, newName.packageName, newName.objectName));
	}

	function adaptDependencies(hanaObject) {
		sqlScriptDependencySubstitutor.execute(hanaObject);
	}
	
	this.execute = function(hanaObject) {
		sqlScriptDependencySubstitutor.setDefaultSchemaCallback(determineDefaultSchema);
		adaptHdbProcedureDefinition(hanaObject);
		adaptDependencies(hanaObject);
	};
}
