function ODataDependencySubstitutor() {


	function substituteDependency(hanaObject, originalDependencyRegex, newDependency) {
		hanaObject.cdata = hanaObject.cdata.replace(originalDependencyRegex, newDependency);
	}
	

	function optionallyQuoteRegExp(str) {
		var quote = '"';
		var backrefQuote = "(?:" + quote + ")";
		var quotedStr = backrefQuote + str + backrefQuote;
		quotedStr = "(" + quotedStr + "|" + str + ")";
		return quotedStr;
	}
	
	function getOptionallyQuotedTableNameRegex(tableSchema, tableName) {
		var optionalSchemaName = "(" + optionallyQuoteRegExp(tableSchema) + ".)?";

		var result = optionalSchemaName + optionallyQuoteRegExp(tableName);
		return new RegExp(result);
	}
	
	function getTableName(schema, name) {
		return '"' + schema + '"."' + name + '"';
	}

	function getViewName(viewName) {
		return '"' + viewName.replace('/', '::') + '"';
	}
	
	function getOptionallyQuotedViewName(viewName) {
		var view = viewName.replace('/', '::');
		var result = optionallyQuoteRegExp(view);
		return result;
	}
	
	function getOptionallyQuotedViewNameRegex(viewName) {
		return new RegExp(getOptionallyQuotedViewName(viewName));
	}
	
	function substituteTableRefWithTableRef(hanaObject, dependency) {
		substituteDependency(hanaObject, getOptionallyQuotedTableNameRegex(dependency.oldLocation.getSchema(), dependency.oldLocation.getName()), getTableName(dependency.getSchema(), dependency.getName()));
	}

	function substituteViewRefWithViewRef(hanaObject, dependency) {
		substituteDependency(hanaObject, getOptionallyQuotedViewNameRegex(dependency.oldLocation.getName()), getViewName(dependency.getName()));
	}
	
	function substituteViewRefWithTableRef(hanaObject, dependency) {
		var anyCharacters = "(.|\\n|\\r|\\u2028|\\u2029)*";
		var viewKeyDefinition = 'keys\\s*\\(' + anyCharacters + '\\)';
		var viewNameWithKeyDefinition = '(' + getOptionallyQuotedViewName(dependency.oldLocation.getName()) + ')(' + anyCharacters + ')' + viewKeyDefinition;

		hanaObject.cdata = hanaObject.cdata.replace(new RegExp(viewNameWithKeyDefinition, "gim"), function(match, p1, p2, p3) {
			return getTableName(dependency.getSchema(), dependency.getName()) + p3;
		});
	}

	this.execute = function(hanaObject) {
		hanaObject.getObjectDependencies().forEach(function(dependency) {
			if (dependency.wasTable()) {
				substituteTableRefWithTableRef(hanaObject, dependency);
			} else if (dependency.wasView()) {
				if (dependency.isView()) {
					substituteViewRefWithViewRef(hanaObject, dependency);
				} else {
					substituteViewRefWithTableRef(hanaObject, dependency);
				}
			}
		});
	};

}
