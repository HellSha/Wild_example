var _ = require("lodash");
var expect = require("expect.js");

var Jasmine = require("../lib/jasmine.js");
var tableDataSet = require('../lib/util/tableDataSet.js')

describe("jasmine.js tests", function () {

    it("matches correctly jasmine.any objects using toEqual", function () {
        var ifa = Jasmine.interface();
  
        function Base() {
        }
        
        function Base2() {
        }

        function SubClass() {
            Base.call(this);
        }
        
        SubClass.prototype = _.create(Base.prototype, {
            'constructor': SubClass
        });
        
        var subObject = new SubClass();

        var result = ifa.jasmine.matchers.toEqual().compare(subObject, ifa.jasmine.any(Base));
        expect(result.pass).to.be.ok();

        result = ifa.jasmine.matchers.toEqual().compare(subObject, ifa.jasmine.any(Base2));
        expect(result.pass).to.not.be.ok();


        var result = ifa.jasmine.matchers.toEqual().compare(ifa.jasmine.any(Base), subObject);
        expect(result.pass).to.be.ok();

        result = ifa.jasmine.matchers.toEqual().compare(ifa.jasmine.any(Base2), subObject);
        expect(result.pass).to.not.be.ok();
    });

    it("matches correctly semantically equal objects using toEqual", function () {
        var ifa = Jasmine.interface();
  
        var obj1 = {
                        "key1" : "val1",
                        "key2" : "val2"
        };
  
        var obj2 = {
        "key2" : "val2",
                        "key1" : "val1"
  
        };
  
        // now test the equality of the real objects
        var result = ifa.jasmine.matchers.toEqual().compare(obj1, obj2);
        expect(result.pass).to.be.ok();
    });
    
    it("matches correctly semantically equal objects using toEqualObjetcs", function () {
      var ifa = Jasmine.interface();

      var obj1 = {
                      "key1" : "val1",
                      "key2" : "val2"
      };

      var obj2 = {
      "key2" : "val2",
                      "key1" : "val1"

      };

      var strObj1 = JSON.stringify(obj1);
      var strObj2 = JSON.stringify(obj2);

      // ensure strings are not equal to avoid false negatives
      var result = ifa.jasmine.matchers.toEqual().compare(strObj1, strObj2);
      expect(result.pass).to.not.be.ok();

      // now test the equality of the real objects
      result = ifa.jasmine.matchers.toEqualObject().compare(obj1, obj2);
      expect(result.pass).to.be.ok();
  });

    it("matches correctly using standard matchers", function () {
        var ifa = Jasmine.interface();
        var result = ifa.jasmine.matchers.toEqual().compare("1", "2");
        expect(result.message).contain("1").and.contain("2");

        result = ifa.jasmine.matchers.toEqualObject().compare("1", "2");
        expect(result.message).contain("1").and.contain("2");

        result = ifa.jasmine.matchers.toEqualString().compare("1", "2");
        expect(result.message).contain("'1'").and.contain("'2'");

        result = ifa.jasmine.matchers.toMatch().compare("1", "2");
        expect(result.pass).to.not.be.ok();
    });

    it("matches correctly using table matcher", function () {
        var dataAsArray1 = [{
            'Id': 1,
            'col2': 'A',
            'COL3': 1.0
        }, {
            'Id': 2,
            'col2': 'B',
            'COL3': 2.0
        }, {
            'Id': 3,
            'col2': 'C',
            'COL3': 3.0
        }];
        var set1 = tableDataSet.createFromArray(dataAsArray1);

        var dataAsArray2 = [{
            'Id': 1,
            'col2': 'A',
            'COL3': 1.0
        }, {
            'Id': 2,
            'col2': 'B',
            'COL3': 2.0
        }, {
            'Id': 3,
            'col2': 'C',
            'COL3': 3.0
        }];
        var set2 = tableDataSet.createFromArray(dataAsArray2);

        var dataAsArray3 = [{
            'Id': 1,
            'col2': 'X',
            'COL3': 1.0
        }, {
            'Id': 2,
            'col2': 'B',
            'COL3': 2.0
        }, {
            'Id': 3,
            'col2': 'C',
            'COL3': 3.0
        }];
        var set3 = tableDataSet.createFromArray(dataAsArray3);

        var ifa = Jasmine.interface();
        var result = ifa.jasmine.matchers.toMatchData().compare(set1, set1, ["Id"]);
        expect(result.pass).to.be.ok();

        result = ifa.jasmine.matchers.toMatchData().compare(set1, set2, ["Id"]);
        expect(result.pass).to.be.ok();

        result = ifa.jasmine.matchers.toMatchData().compare(set1, set3, ["Id"]);
        expect(result.pass).to.not.be.ok();
    });
});
