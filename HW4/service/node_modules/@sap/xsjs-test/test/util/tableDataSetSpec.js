var expect = require("expect.js");
var sinon = require("sinon");

var ResultSet = require("@sap/xsjs/lib/xsjs/db/dbapi/ResultSet.js");
var tableDataSetLib = require("../../lib/util/tableDataSet.js");

var sandbox;

// define globally, used inside tableDataSet
$ = {
    db: {
        ResultSet: {
            getString: function () {
            }
        }
    }
};

describe("util/tableDataSet.js tests", function () {
    beforeEach(function () {
        sandbox = sinon.sandbox.create();
    });

    afterEach(function () {
        sandbox.restore();
    });

    it("calls correct getters", function () {
        var stubDollar = sandbox.stub($.db.ResultSet, "getString");

        var rowData =  [{
            "hugo": 1, // INTEGER
            "Wall.E": "Eva", // TEXT
            "binary 12": new Buffer("some binary data", "binary"), // BINARY
            "varbinary 13": new Buffer("some varbinary data", "binary"), // VARBINARY
            "date 14": "2018-01-01", // DATE
            "time 15": "21:22:23", // TIME
            "bstring 33": new Buffer("some bstring", "binary") // BSTRING
        }];

        var rsData = {
            sync: {
                fetch: function () {
                    return rowData;
                }
            },
            metadata: [
                {
                    columnDisplayName: "hugo",
                    dataType: 3 // INTEGER
                },
                {
                    columnDisplayName: "Wall.E",
                    dataType: 51 // TEXT
                },
                {
                    columnDisplayName: "binary 12",
                    dataType: 12 // BINARY
                },
                {
                    columnDisplayName: "varbinary 13",
                    dataType: 13 // VARBINARY
                },
                {
                    columnDisplayName: "date 14",
                    dataType: 14 // DATE
                },
                {
                    columnDisplayName: "time 15",
                    dataType: 15 // TIME
                },
                {
                    columnDisplayName: "bstring 33",
                    dataType: 33 // BSTRING
                }
            ]
        };

        var rs = new ResultSet(rsData);
        var tableDataSet = tableDataSetLib.createFromResultSet(rs);

        expect(stubDollar.called).to.not.be.ok();
    });

    it("reports invalid data type for integer", function () {
        var stubDollar = sandbox.stub($.db.ResultSet, "getString");

        var rowData =  [{
            "hugo": "some string" // should be INTEGER
        }];

        var rsData = {
            sync: {
                fetch: function () {
                    return rowData;
                }
            },
            metadata: [
                {
                    columnDisplayName: "hugo",
                    dataType: 3 // INTEGER
                }
            ]
        };

        var rs = new ResultSet(rsData);
        var tableDataSet;
        try {
            tableDataSet = tableDataSetLib.createFromResultSet(rs);
        } catch(err) {
            expect(err.message).to.contain("some string");
        }
        if(tableDataSet) {
            expect().fail("expected exception"); // fail if no exception is thrown
        }
        expect(stubDollar.called).to.not.be.ok();
    });

    it("reports invalid data type for varbinary", function () {
        var stubDollar = sandbox.stub($.db.ResultSet, "getString");

        var rowData =  [{
            "hugo": "some string" // should be VARBINARY
        }];

        var rsData = {
            sync: {
                fetch: function () {
                    return rowData;
                }
            },
            metadata: [
                {
                    columnDisplayName: "hugo",
                    dataType: 13 // VARBINARY
                }
            ]
        };

        var rs = new ResultSet(rsData);
        var tableDataSet;
        try {
            tableDataSet = tableDataSetLib.createFromResultSet(rs);
        } catch(err) {
            expect(err.message).to.contain("ArrayBuffer");
        }
        if(tableDataSet) {
            expect().fail("expected exception"); // fail if no exception is thrown
        }

        expect(stubDollar.called).to.not.be.ok();
    });
});