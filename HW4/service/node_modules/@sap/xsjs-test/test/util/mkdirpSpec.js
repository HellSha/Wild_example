var expect = require("expect.js");
var sinon = require("sinon");

var fs = require("fs");
var path = require("path");

var mkdirp = require("../../lib/util/mkdirp.js");

var sandbox;

describe("util/mkdirp.js tests", function () {
    beforeEach(function () {
        sandbox = sinon.sandbox.create();
    });

    afterEach(function () {
        sandbox.restore();
    });

    it("calls mkdirSync correctly with valid params", function () {
        var stubExistsSync = sandbox.stub(fs, "existsSync");

        var stubExistsSyncABC = stubExistsSync.withArgs("a/b/c").returns(false);
        var stubExistsSyncAB = stubExistsSync.withArgs("a/b").returns(false);
        var stubExistsSyncA = stubExistsSync.withArgs("a").returns(false);
        var stubExistsSyncDot = stubExistsSync.withArgs(".").returns(true);

        var stubStatSync = sandbox.stub(fs, "statSync").withArgs(".").returns({
            isDirectory: function () {
                return true;
            }
        });

        var stubMkdirSync = sandbox.stub(fs, "mkdirSync");
        var stubMkdirSyncA = stubMkdirSync.withArgs("a");
        var stubMkdirSyncAB = stubMkdirSync.withArgs("a/b");
        var stubMkdirSyncABC = stubMkdirSync.withArgs("a/b/c");

        mkdirp.mkdirpSync("a/b/c");

        expect(stubExistsSync.called).to.be.ok();
        expect(stubExistsSyncABC.calledBefore(stubExistsSyncAB)).to.be.ok();
        expect(stubExistsSyncAB.calledBefore(stubExistsSyncA)).to.be.ok();
        expect(stubExistsSyncA.calledBefore(stubExistsSyncDot)).to.be.ok();

        expect(stubMkdirSync.called).to.be.ok();
        expect(stubMkdirSyncA.calledBefore(stubMkdirSyncAB)).to.be.ok();
        expect(stubMkdirSyncAB.calledBefore(stubMkdirSyncABC)).to.be.ok();

        expect(stubStatSync.called).to.be.ok();
    });

    it("calls mkdirSync correctly with invalid params", function () {
        var stubExistsSync = sandbox.stub(fs, "existsSync");

        var stubExistsSyncABC = stubExistsSync.withArgs("a/b/c").returns(false);
        var stubExistsSyncAB = stubExistsSync.withArgs("a/b").returns(false);
        var stubExistsSyncA = stubExistsSync.withArgs("a").returns(false);
        var stubExistsSyncDot = stubExistsSync.withArgs(".").returns(true);

        var stubStatSync = sandbox.stub(fs, "statSync").withArgs(".").returns({
            isDirectory: function () {
                return false;
            }
        });

        var stubMkdirSync = sandbox.stub(fs, "mkdirSync");

        try {
            mkdirp.mkdirpSync("a/b/c");
        } catch(err) {
            expect(stubExistsSync.called).to.be.ok();
            expect(stubExistsSyncABC.calledBefore(stubExistsSyncAB)).to.be.ok();
            expect(stubExistsSyncAB.calledBefore(stubExistsSyncA)).to.be.ok();
            expect(stubExistsSyncA.calledBefore(stubExistsSyncDot)).to.be.ok();

            expect(stubMkdirSync.notCalled).to.be.ok();

            expect(stubStatSync.called).to.be.ok();

            return;
        }

        // fail if function doesn't throw error
        expect(false).to.be.ok();
    });

    it("call mkdir correctly with valid params", function (done) {
        var stubExists = sandbox.stub(fs, "exists");
        var stubExistsABC = stubExists.withArgs("a/b/c").callsArgWith(1, false);
        var stubExistsAB = stubExists.withArgs("a/b").callsArgWith(1, false);
        var stubExistsA = stubExists.withArgs("a").callsArgWith(1, false);
        var stubExistsEmpty = stubExists.withArgs("").callsArgWith(1, true);

        var stubStat = sandbox.stub(fs, "stat").withArgs("").callsArgWith(1, {
            isDirectory: function () {
                return true;
            }
        });

        var stubMkdir = sandbox.stub(fs, "mkdir");
        var stubMkdirA = stubMkdir.withArgs("a").callsArg(1);
        var stubMkdirAB = stubMkdir.withArgs("a/b").callsArg(1);
        var stubMkdirABC = stubMkdir.withArgs("a/b/c").callsArg(1);

        mkdirp.mkdirp("a/b/c", function (oErr) {
            expect(oErr).to.be(undefined);

            expect(stubExists.called).to.be.ok();
            expect(stubStat.called).to.be.ok();
            expect(stubMkdir.called).to.be.ok();

            expect(stubMkdirA.calledBefore(stubMkdirAB)).to.be.ok();
            expect(stubMkdirAB.calledBefore(stubMkdirABC)).to.be.ok();

            expect(stubExistsABC.calledBefore(stubExistsAB)).to.be.ok();
            expect(stubExistsAB.calledBefore(stubExistsA)).to.be.ok();
            expect(stubExistsA.calledBefore(stubExistsEmpty)).to.be.ok();

            expect(stubStat.called).to.be.ok();

            done();
        });
    });

    it("call mkdir correctly with invalid params", function (done) {
        var stubExists = sandbox.stub(fs, "exists");
        var stubExistsABC = stubExists.withArgs("a/b/c").callsArgWith(1, false);
        var stubExistsAB = stubExists.withArgs("a/b").callsArgWith(1, false);
        var stubExistsA = stubExists.withArgs("a").callsArgWith(1, false);
        var stubExistsEmpty = stubExists.withArgs("").callsArgWith(1, true);

        var stubStat = sandbox.stub(fs, "stat").withArgs("").callsArgWith(1, {
            isDirectory: function () {
                return false;
            }
        });

        var spyMkdir = sandbox.spy(fs, "mkdir");

        mkdirp.mkdirp("a/b/c", function (oErr) {
            expect(oErr).to.be("Path exists but is not a directory:");

            expect(stubExists.called).to.be.ok();
            expect(stubStat.called).to.be.ok();

            expect(spyMkdir.notCalled).to.be.ok();

            expect(stubExistsABC.calledBefore(stubExistsAB)).to.be.ok();
            expect(stubExistsAB.calledBefore(stubExistsA)).to.be.ok();
            expect(stubExistsA.calledBefore(stubExistsEmpty)).to.be.ok();

            done();
        });
    });
});