var expect = require("expect.js");

var fs = require("fs");
var path = require("path");
var rimraf = require("rimraf");

var Index = require("../lib/index.js");
var runtime = require("@sap/xsjs/lib/runtime.js");

var sinon = require("sinon");

var sandbox;

describe("integration tests", function () {
    var testResultFileName = "testreport";
    var coverageFile = "coverage";

    var testResultsPath = path.join(__dirname, "___testresults");

    beforeEach(function () {
        sandbox = sinon.sandbox.create();
    });

    afterEach(function () {
        sandbox.restore();
        rimraf.sync(testResultsPath);
    });

    it("loads the correct tests, writes junit xml reports", function (done) {
        var testOptions = {
            test: {
                format: "junit",
                pattern: ".*Test",
                reportdir: testResultsPath,
                filename: testResultFileName
            },
            coverage: {
                reporting: {
                    reports: ["json"]
                },
                dir: testResultsPath,
                filename: coverageFile
            }
        };

        var spyConsoleLog = sinon.spy(console, "log");

        var index = new Index(testOptions);
        index.runTests(function (output, contentType, coverageObject) {
            expect(contentType).to.be("application/xml");
            expect(output).to.contain("sampleTest");
            // coverage.junit is not supported hence not tested here

            expect(fs.existsSync(path.join(testResultsPath, "coverage.json"))).to.be.ok();

            expect(spyConsoleLog.calledWithMatch("asynchronous output from single test")).to.be.ok();
            expect(spyConsoleLog.calledWithMatch("asynchronous output from multi test")).to.be.ok();

            done();
        });
    });

    it("loads the correct tests, writes xml reports", function (done) {
        var testOptions = {
            test: {
                format: "xml",
                pattern: ".*Test",
                reportdir: testResultsPath,
                filename: testResultFileName
            },
            coverage: {
                reporting: {
                    reports: ["json"]
                },
                dir: testResultsPath,
                filename: coverageFile
            }
        };

        var index = new Index(testOptions);
        index.runTests(function (output, contentType, coverageObject) {
            expect(contentType).to.be("application/xml");
            expect(output).to.contain("sampleTest");
            expect(output).to.contain("Expected &apos;spec name&apos; to contain &apos;not ok&apos;.");

            done();
        });
    });

    it("loads the correct tests, writes html test reports", function (done) {
        var testOptions = {
            test: {
                format: "html",
                pattern: ".*Test",
                reportdir: testResultsPath,
                filename: testResultFileName
            },
            coverage: {
                reporting: {
                    reports: ["html"]
                },
                dir: testResultsPath,
                filename: coverageFile
            }
        };

        var index = new Index(testOptions);
        index.runTests(function (output, contentType, coverageObject) {
            expect(contentType).to.be("text/html");
            expect(fs.existsSync(path.join(testResultsPath, "coverage.html"))).to.be.ok();

            done();
        });
    });

    it("loads the correct tests, writes json test reports", function (done) {
        var testOptions = {
            test: {
                format: "json",
                pattern: ".*Test",
                reportdir: testResultsPath,
                filename: testResultFileName,
                profile: "a"
            },
            coverage: {
                reporting: {
                    reports: ["json"]
                },
                dir: testResultsPath,
                filename: coverageFile
            }
        };

        var index = new Index(testOptions);
        index.runTests(function (output, contentType, coverageObject) {
            expect(contentType).to.be("application/json");

            expect(fs.existsSync(testResultsPath)).to.be.ok();
            expect(fs.existsSync(path.join(testResultsPath, "coverage.json"))).to.be.ok();
            var contents = fs.readFileSync(path.join(testResultsPath, "coverage.json"), "utf8");
            expect(contents).to.match(/^\{/);

            done();
        });
    });

    it("loads only the declared spec", function (done) {
        var testOptions = {
            test: {
                format: "xml",
                pattern: ".*Test",
                reportdir: testResultsPath,
                filename: testResultFileName,
                spec: "sample test suite only spec"
            },
            coverage: {
                reporting: {
                    reports: ["json"]
                },
                dir: testResultsPath,
                filename: coverageFile
            }
        };

        var index = new Index(testOptions);
        index.runTests(function (output, contentType, coverageObject) {
            expect(contentType).to.be("application/xml");

            // since spec is filtered out it's errors must not appear in result
            expect(output).to.not.contain("Expected &apos;spec name&apos; to contain &apos;not ok&apos;.");

            expect(fs.existsSync(testResultsPath)).to.be.ok();
            expect(fs.existsSync(path.join(testResultsPath, "coverage.json"))).to.be.ok();
            var contents = fs.readFileSync(path.join(testResultsPath, "coverage.json"), "utf8");
            expect(contents).to.match(/^\{/);

            done();
        });
    });
});