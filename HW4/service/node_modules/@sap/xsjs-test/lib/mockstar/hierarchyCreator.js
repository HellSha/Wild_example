function HierarchyCreator(repository) {

    var processedObjects = [];

    function hasBeenProcessed(hanaObject) {
        return processedObjects.some(hanaObject.equals.bind(hanaObject));
    }

    function writeAndActivateIfNotDoneYet(hanaObject) {
        if (!hasBeenProcessed(hanaObject)) {
            repository.write(hanaObject);
            try {
                repository.activate(hanaObject);
            } catch (e) {
                repository.revert(hanaObject);
                throw e;
            }
            processedObjects.push(hanaObject);
        }
    }

    function writeAndActivateObjectsRecursive(hanaObject) {
        $.trace.info("activate " + hanaObject.getFileDependencies().length + " dependenc" + (hanaObject.getFileDependencies().length === 1 ? "y" : "ies") + " of HanaObject '" + hanaObject.toString() + "'");
        hanaObject.getFileDependencies().forEach(writeAndActivateObjectsRecursive);

        if (hanaObject.hasFileDependencies()) {
            $.trace.info("write HanaObject '" + hanaObject.toString() + "'");
            writeAndActivateIfNotDoneYet(hanaObject);
        } else {
            $.trace.info("skip writing of HanaObject '" + hanaObject.toString() + "' because it has no dependencies");
        }
    }

    this.writeAndActivateObjects = function(dependencyHierarchy) {
        processedObjects = [];
        writeAndActivateObjectsRecursive(dependencyHierarchy.rootModel);
        if (processedObjects.length === 0) {
            $.trace.error("found no dependency to be substituted");
            throw new Error("Test Model creation is aborted: found no dependency to be substituted");
        }
        repository.release();
    };
}


module.exports = HierarchyCreator