/**
 * @module mockstar
 */

var TestModelCreator = require('./testModelCreator.js')
var TruncOptions = require('./truncOptions.js')
var DependencySubstitutionsConverter = require('./dependencySubstitutionsConverter.js')

/**
 * Creates and activates a copy of the original model in the HANA repository with the dependencies to other views/tables being replaced. At least one dependency
 * substitution must be applied. <br/><br/> Supported HANA model types:
 * <ul>
 * <li>Graphic Calculation/Analytic/Attribute Views</li>
 * <li>Scripted Views</li>
 * <li>Stored Procedures</li>
 * </ul>
 * <br/> Supported dependency types that can be replaced with test tables:
 * <ul>
 * <li>Graphic Calculation/Analytic/Attribute Views</li>
 * <li>Scripted Views</li>
 * <li>Tables</li>
 * </ul>
 * <br/><br/> In HANA, "_SYS_REPO" needs select permission (with grant option) to the test schema in order to activate the generated test model with its
 * underlying catalog objects. Therefore make sure that "_SYS_REPO" has select permission to the schema of the test tables. Its recommended to take the user
 * schema as test schema. That allows the parallel execution of the same test by different users. Either you can execute the following SQL statements once per
 * system while you create the test schema:
 *
 * <pre>
 * create schema MY_TEST_SCHEMA;
 * grant select on schema MY_TEST_SCHEMA to _SYS_REPO with grant option;
 * </pre>
 *
 * ... or you can do it even programmatically within your test.
 *
 * <pre class="prettyprint"><code><pre>
 * var testSchema = $.session.getUsername().toUpperCase();
 * function grantSelectUserSchemaToSysRepo() {
 *     var connection = $.db.getConnection();
 *     var sqlExecutor = new sap.hana.testtools.unit.util.sqlExecutor.SqlExecutor(connection);
 *     sqlExecutor.execSingle('grant select on schema ' + testSchema + ' to _SYS_REPO with grant option');
 *     connection.close();
 * }
 * </pre></code></pre>
 *
 * @example
 *
 * <pre>
 * var testPackage = 'tmp.' + $.session.getUsername().toLowerCase();
 * var mockstar = $.import(&quot;sap.hana.testtools.mockstar&quot;, &quot;apiFacade&quot;);
 * var dependencySubstitutions = [ {
 *     original : {
 *         schema : 'SCHEMA',
 *         name : 'ORDERS'
 *     },
 *     substitute : {
 *         schema : 'D123456',
 *         name : 'ORDERS'
 *     }
 * }, {
 *     original : 'package.subpackage/OTHER_VIEW',
 *     substitute : '&quot;D123456&quot;.&quot;OTHER_VIEW&quot;'
 * } ];
 *
 * var testModel = mockstar.createTestModel('package/MY_VIEW', testPackage, dependencySubstitutions, mockstar.TruncOptions.FULL);
 * </pre>
 *
 * @param {String}
 *            originalModel the name of the original model
 * @param {String}
 *            targetPackage the target package where the test model should be created, e.g. tmp.&lt;username&gt;
 * @param {Array}
 *            dependencySubstitutions list of dependency substitution rules
 * @param {module:mockstar.TruncOptions}
 *            [truncOption=TruncOptions.NONE] per default the target package gets prefixed with the package of the original model
 *
 * @returns {Object} the property <b>runTimePath</b> contains the runtime name, the property <b>designTimePath</b> the designtime name of the created test
 *          model
 *
 * @deprecated since 1.10.0, use {@link module:mockstarEnvironment~define mockstarEnvironment.define} function or
 * {@link module:mockstarEnvironment~defineAndCreate mockstarEnvironment.defineAndCreate} instead
 */
var createTestModel = function(originalModel, targetPackage, dependencySubstitutions, truncOption) {
    var dependencySubstitutionsConverter = new DependencySubstitutionsConverter();

    var unifiedDependencySubstitutions = dependencySubstitutionsConverter.unifyAll(dependencySubstitutions);

    return TestModelCreator.execute(originalModel, targetPackage, unifiedDependencySubstitutions, truncOption);
};

/**
 * Creates a test model out of an HTTP request.
 *
 * @private
 * @ignore
 */
var createTestModelFromRequest = function(request) {
    var originalModel = request.originalView || request.originalModel;
    var targetPackage = request.targetPackage;
    var dependencySubstitutions = request.dependencySubstitutions;
    var truncOption = request.truncOption || TruncOptions.NONE;

    return createTestModel(originalModel, targetPackage, dependencySubstitutions, truncOption);
};


module.exports = {
    TestModelCreator : TestModelCreator,
    TruncOptions : TruncOptions,
    DependencySubstitutionsConverter : DependencySubstitutionsConverter,
    createTestModel:createTestModel,
    createTestModelFromRequest :createTestModelFromRequest
}