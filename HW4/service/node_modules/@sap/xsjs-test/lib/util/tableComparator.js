var util = (function() {

    function filter(source, predicate) {
        var target = {};
        Object.keys(source).filter(predicate).forEach(function(prop) {
            target[prop] = source[prop];
        });
        return target;
    }

    function difference(a, b) {
        return filter(a, function(prop) {
            return !b.hasOwnProperty(prop);
        });
    }

    function intersection(a, b) {
        return filter(a, function(prop) {
            return b.hasOwnProperty(prop);
        });
    }

    return {
        difference : difference,
        intersection : intersection
    };

}());

var compareDataSets = (function() {

    function isEmpty(obj) {
        var prop = null;
        for (prop in obj) {
            if (obj.hasOwnProperty(prop)) {
                return false;
            }
        }
        return true;
    }

    function getValues(obj) {
        return Object.keys(obj).map(function(key) {
            return obj[key];
        });
    }

    function RowKeyFactory(keyFields) {
        this.keyFields = keyFields.slice();
    }

    RowKeyFactory.prototype.makeKey = function(row, index) {
        if (this.keyFields.length === 0) {
            return index;
        }
        return "$$" + this.keyFields.map(function(keyField) {
                return row[keyField];
            }).join(';');
    };

    RowKeyFactory.prototype.project = function(row, target, rowKey) {
        if (this.keyFields.length === 0) {
            return {
                "#row" : parseInt(rowKey, 10) + 1
            };
        }
        var projection = target || {};
        this.keyFields.forEach(function(keyField) {
            projection[keyField] = row[keyField];
        });
        return projection;
    };

    RowKeyFactory.prototype.ensureKeyFields = function(dataSet) {
        if (dataSet.getRowCount() > 0) {
            this.keyFields.forEach(function(keyField) {
                if (!dataSet.getColumn(keyField)) {
                    throw new Error("Key column '" + keyField + "' missing from data set (" + dataSet.getColumns().map(function(column) {
                        return column.getName();
                    }).join(", ") + ")");
                }
            });
        }
    };

    function makeRowSet(dataSet, rowKeyFactory) {
        var rowSet = {};
        rowKeyFactory.ensureKeyFields(dataSet);
        dataSet.getRows().forEach(function(row, index) {
            rowSet[rowKeyFactory.makeKey(row, index)] = row;
        });
        return rowSet;
    }

    function getCommonRowsWithDifferingFields(actRowSet, expRowSet, keyFactory, isEqual) {
        function getFieldsDiffering(rowAct, rowExp) {
            var differing = {};
            Object.keys(rowExp).forEach(function(field) {
                if (!rowAct.hasOwnProperty(field)) {
                    throw new Error("Column '" + field + "' is missing in actual data");
                }
                if (!isEqual(rowAct[field], rowExp[field])) {
                    differing[field] = {
                        actual : rowAct[field],
                        expected : rowExp[field]
                    };
                }
            });
            return differing;
        }

        var rowsDiffering = [];
        var rowsCommon = util.intersection(actRowSet, expRowSet);
        Object.keys(rowsCommon).forEach(function(rowKey) {
            var rowAct = actRowSet[rowKey];
            var rowExp = expRowSet[rowKey];
            var fieldsDiffering = getFieldsDiffering(rowAct, rowExp);
            if (!isEmpty(fieldsDiffering)) {
                rowsDiffering.push({
                    actual : rowAct,
                    expected : rowExp,
                    diff : fieldsDiffering,
                    key : keyFactory.project(rowAct, {}, rowKey)
                });
            }
        });
        return rowsDiffering;
    }

    return function(actDataSet, expDataSet, keyFields, isEqualCallback) {
        var keyFactory = new RowKeyFactory(keyFields);
        var actRowSet = makeRowSet(actDataSet, keyFactory);
        var expRowSet = makeRowSet(expDataSet, keyFactory);

        var rowsActOnly = getValues(util.difference(actRowSet, expRowSet));
        var rowsExpOnly = getValues(util.difference(expRowSet, actRowSet));
        var rowsCommonDiffering = getCommonRowsWithDifferingFields(actRowSet, expRowSet, keyFactory, isEqualCallback);

        return {
            isEqual : isEmpty(rowsActOnly) && isEmpty(rowsExpOnly) && isEmpty(rowsCommonDiffering),
            rowsActualOnly : rowsActOnly,
            rowsExpectedOnly : rowsExpOnly,
            rowsCommonDiffering : rowsCommonDiffering
        };
    };

}());


module.exports = {
    util : util,
    compareDataSets : compareDataSets
}
