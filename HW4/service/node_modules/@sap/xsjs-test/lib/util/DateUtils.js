/**
 * Created on 31.03.2015.
 */
/**
 * @module dateUtils
 */
var DateUtils = null;

    /**
     * Creates a dateUtils object that offers convenience functions to get a date in a formatted way.
     *
     * @example
     *
     * <pre>
     * var DateUtils = $.import("sap.hana.testtools.unit.util", "dateUtils").DateUtils;
     *
     * var fixTodaysDate = new Date(2013, 8, 7, 11, 9, 7, 0); // valid month values:'0-11'
     * var dateUtilsForFixedDate = new DateUtils(fixTodaysDate);
     * </pre>
     *
     * @param {Date}
     *            [todaysDate] overwrites the current time with a fix date during the test run
     * @inner
     * @memberof module:dateUtils
     * @constructor
     */
    DateUtils = function(todaysDate) {
        if (todaysDate && todaysDate instanceof Date) {
            this.todaysDate = todaysDate;
        }
    };

    DateUtils.YYYYMMDD = 'YYYYMMDD'; // default
    DateUtils.YYYY_MM_DD = 'YYYY-MM-DD';
    DateUtils.YYYYMMDDhhmmss = 'YYYYMMDDhhmmss';
    DateUtils.YYYYMMDDhhmmssSSS = 'YYYYMMDDhhmmssSSS';

    DateUtils.prototype.format = DateUtils.YYYYMMDD;

    function getDateOfNow() {
        return this.todaysDate || new Date();
    }

    function pad(number) {
        if (number < 10) {
            return '0' + number;
        }
        return number;
    }

    function applyParticle(str, particle, value) {
        return str.replace(particle, value, "g");
    }

    function applyFormat(format, YYYY, MM, DD, hh, mm, ss, SSS) {
        var dateString = format;
        dateString = applyParticle(dateString, "YYYY", YYYY);
        dateString = applyParticle(dateString, "MM", MM);
        dateString = applyParticle(dateString, "DD", DD);
        dateString = applyParticle(dateString, "hh", hh);
        dateString = applyParticle(dateString, "mm", mm);
        dateString = applyParticle(dateString, "ss", ss);
        dateString = applyParticle(dateString, "SSS", SSS);
        return dateString;
    }

    function formatDate(date, format) {
        var YYYY = date.getFullYear();
        var MM = pad(date.getMonth() + 1);
        var DD = pad(date.getDate());
        var hh = pad(date.getHours());
        var mm = pad(date.getMinutes());
        var ss = pad(date.getSeconds());
        var SSS = pad(date.getMilliseconds());

        return applyFormat(format, YYYY, MM, DD, hh, mm, ss, SSS);
    }

    /**
     * Sets the way the date should be formatted to overwrite the default "YYYYMMDD".
     *
     * @example
     *
     * <pre>
     * var dateUtils = new DateUtils();
     * dateUtils.setFormat(DateUtils.YYYY_MM_DD);      //equivalent to setFormat("YYYY-MM-DD");
     * var formattedToday = dateUtils.getTodaysDate(); //e.g. "2014-07-16"
     * </pre>
     *
     * @method setFormat
     * @memberof! module:dateUtils~DateUtils.prototype
     * @param {String}
     *            dateFormat takes one of the constants like DateUtils.YYYY_MM_DD or a string like "DD.MM.YYYY hh:mm:ss" where
     *            <ul>
     *            <li>'YYYY' - full year</li>
     *            <li>'MM' - month</li>
     *            <li>'DD' - date</li>
     *            <li>'hh' - hours</li>
     *            <li>'mm' - minutes</li>
     *            <li>'ss' - seconds</li>
     *            <li>'SSS' - milliseconds</li>
     *            </ul>
     *            gets replaced when calling the getter functions.
     *
     */
    DateUtils.prototype.setFormat = function(dateFormat) {
        this.format = dateFormat;
    };

    /**
     * Returns the date of today.
     *
     * @example
     *
     * <pre>
     * var dateUtils = new DateUtils();
     * var today = dateUtils.getTodaysDate();
     * </pre>
     *
     * @method getTodaysDate
     * @memberof! module:dateUtils~DateUtils.prototype
     * @returns {String}
     */
    DateUtils.prototype.getTodaysDate = function() {
        return formatDate(getDateOfNow.call(this), this.format);
    };

    /**
     * Returns the date of today.
     *
     * @example
     *
     * <pre>
     * var dateUtils = new DateUtils();
     * var today = "Today: " + dateUtils;
     * </pre>
     *
     * @method toString
     * @memberof! module:dateUtils~DateUtils.prototype
     * @returns {String}
     */
    DateUtils.prototype.toString = function() {
        return this.getTodaysDate();
    };

    /**
     * Returns the date in the past. Substracts some days from the current date.
     *
     * @example
     *
     * <pre>
     * var dateUtils = new DateUtils();
     * var yesterday = dateUtils.getDateInThePast(1);
     * </pre>
     *
     * @method getDateInThePast
     * @memberof! module:dateUtils~DateUtils.prototype
     * @param {Integer}
     *            pastDays Number of days in the past.
     * @returns {String}
     */
    DateUtils.prototype.getDateInThePast = function(pastDays) {
        var pastDate = getDateOfNow.call(this);
        pastDate.setDate(pastDate.getDate() - pastDays);

        return formatDate(pastDate, this.format);
    };

    /**
     * Returns the date in the future. Adds some days to the current date.
     *
     * @example
     *
     * <pre>
     * var dateUtils = new DateUtils();
     * var tomorrow = dateUtils.getDateInTheFuture(1);
     * </pre>
     *
     * @method getDateInTheFuture
     * @memberof! module:dateUtils~DateUtils.prototype
     * @param {Integer}
     *            daysToBeAdded Number of days in the past.
     * @returns {String}
     */
    DateUtils.prototype.getDateInTheFuture = function(daysToBeAdded) {
        var futureDate = getDateOfNow.call(this);
        futureDate.setDate(futureDate.getDate() + daysToBeAdded);

        return formatDate(futureDate, this.format);
    };


module.exports = DateUtils
