/*
Copyright (c) 2008-2013 Pivotal Labs

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

var DOM = require('./dom.js')
var mJasmine = require('../jasmine.js')
var fs = require('fs')



/*global jasmine*/
//var Reporter = null;


	//var DOM = $.import("sap.hana.testtools.unit.jasminexs.reporter2", "dom").DOM;
	
	// copy all used elements in order to avoid issues with code coverage
	// var DOMRawTextNode = DOM.RawTextNode;
	var createDOM = DOM.create;
	var exportRawJSToDOM = DOM.exportRawJS;
	var exportFunctionToDOM = DOM.exportFunction;
	var getExportedSymbolsForDOM = DOM.getExportedSymbols;

	function compareVersions(v1, v2) {
		var res = v1.version - v2.version;
		if (res === 0) {
			res = v1.version_sp - v2.version_sp;
			if (res === 0) {
				res = v1.version_patch - v2.version_patch;
			}
		}
		return res;
	}


	var noopTimer = {
		start : function() {
			return;
		},
		stop : function() {
			return;
		},
		elapsed : function() {
			return 0;
		}
	};

	function getSeverityDisplayName(severity) {
		switch (severity) {
		case jasmineInterface.jasmine.Spec.severity.NONE:
			return "";
		case jasmineInterface.jasmine.Spec.severity.INFO:
			return "Info";
		case jasmineInterface.jasmine.Spec.severity.WARNING:
			return "Warning";
		case jasmineInterface.jasmine.Spec.severity.ERROR:
			return "";
		default:
			return "<SEVERITY:" + severity + ">";
		}
	}

	function ResultsNode(result, type, parent) {
		this.result = result;
		this.type = type;
		this.parent = parent;

		this.children = [];

		this.addChild = function(result, type) {
			var child = new ResultsNode(result, type, this);
			this.children.push(child);
			return child;
		};

		this.getDescriptionFragments = function() {
			var fragments = [];
			var current = this;
			while (current) {
				if (current.result && current.result.description) {
					fragments.unshift(current.result.description);
				}
				current = current.parent;
			}
			return fragments;
		};

		this.getStatus = function() {
			if (this.result.status) {
				return this.result.status;
			}
			var disabled = this.children.every(function(child) {
				return child.getStatus() === "disabled";
			});
			return disabled ? "disabled" : "";
		};
	}

	function pluralize(singular, count) {
		var word = (count === 1 ? singular : singular + "s");

		return count + " " + word;
	}

    /*
	function getParamTupelListWithoutSpecFilter_with_$_usage(clearProfiles) {
		if (!$.request) {
			return [];
		}

		var params = Array.prototype.filter.call($.request.parameters, function(param) {
			$.trace.info('filter parameter ' +  JSON.stringify(param,null,2) )
			var paramName = param.name.toLowerCase();
			return paramName !== "spec" && (!clearProfiles || [ "profile", "tags" ].indexOf(paramName) === -1);
		});
		return params;
	}

	function getParamTupelListWithoutSpecFilter(clearProfiles) {
		var paramNames = Object.keys( req.query )
		var params = paramNames.map(function(paramName){
			return {
				name : paramName,
				value : req.query[paramName]
			}
		})

		return params.filter(function(param){
			var paramName = param.name.toLowerCase()
			return paramName !== "spec" && (!clearProfiles || [ "profile", "tags" ].indexOf(paramName) === -1)
		})
	}



	function makeUrlQuery(spec, clearProfiles) {
		var paramTupelList = getParamTupelListWithoutSpecFilter(clearProfiles);
		if (spec) {
			paramTupelList.push({
				name : "spec",
				value : spec
			});
		}
		if (clearProfiles) {
			paramTupelList.push({
				name : "profile",
				value : "all"
			});
		}
		return "?" + paramTupelList.map(function(tupel) {
			return encodeURIComponent(tupel.name) + "=" + encodeURIComponent(tupel.value);
		}).join("&");
	}


	function specHref(result) {
		return makeUrlQuery(result && result.fullName);
	}
	function rootHref() {
		return makeUrlQuery(null, true);
	}
	*/

	function  HtmlReporter(options, jasmineInterface){
        var jasmine = jasmineInterface.jasmine
        var Timer = jasmineInterface.jasmine.Timer

		var document = createDOM("body", {
			id : "spec-list"
		});

		function getContainer() {
			return document;
		}

		this.type = "html";

		var timer = new Timer();
		var specsExecuted = 0, failureCount = 0, warningCount = 0, pendingSpecCount = 0;
		var htmlElements = {
			main : null,
			symbols : null,
			banner : null,
			alert : null,
			results : null,
			details : null,
			toggleSkipped : null
		};

		function setMenuModeTo(mode) {
			htmlElements.main.className = "html-reporter " + mode;
		}

		this.initialize = function() {
			htmlElements.banner = createDOM("div", {
				class : "banner"
			}, createDOM("span", {
				class : "title"
			}, createDOM("span", {
				class : "version"
			}, "Jasmine " + jasmineInterface.jasmine.version )));

			htmlElements.symbols = createDOM("ul", {
				class : "symbol-summary"
			});

			htmlElements.alert = createDOM("div", {
				class : "alert"
			});

			htmlElements.details = createDOM("div", {
				class : "details"
			});

			htmlElements.results = createDOM("div", {
				class : "results no-details",
				id : "reporter_results"
			}, htmlElements.details);

			htmlElements.main = createDOM("div", {
				class : "html-reporter"
			}, htmlElements.banner, htmlElements.symbols, htmlElements.alert, htmlElements.results);

			getContainer().appendChild(htmlElements.main);
		};

		this.totalSpecsDefined = 0;
		this.jasmineStarted = function(options) {
			this.totalSpecsDefined = options.totalSpecsDefined || 0;

			if (options.timer) {
				timer = options.timer;
			}
			timer.start();
		};

		var summary = createDOM("div", {
			class : "summary"
		});

		var topResults = new ResultsNode({}, "", null), currentParent = topResults, currentChild = null;

		this.suiteStarted = function(result) {
			currentParent = currentParent.addChild(result, "suite");

			if (!result.timer) {
				result.timer = Timer ? new Timer() : noopTimer;
			}
			result.timer.start();
		};

		this.suiteDone = function(result) {
			//result.timer.stop();
            result.timer.elapsedTime = result.timer.elapsed()

			if (currentParent === topResults) {
				return;
			}

			currentParent = currentParent.parent;
		};

		this.specStarted = function(result) {
			currentChild = currentParent.addChild(result, "spec");

			if (!result.timer) {
				result.timer = Timer ? new Timer() : noopTimer;
			}
			result.timer.start();
		};

        /*
		function cleanupStack(stack) {
			if (jasmineInterface.getEnv().params && jasmine.getEnv().params.fullstack) {
				return stack;
			}
			var truncated = "";
			truncated += stack;
			truncated = truncated.replace(/\w*@\/sap\/hana\/testtools\/unit\/jasminexs\/TestRunner\.xsjs:\d+[\r\n]+$/, "");
			truncated = truncated.replace(/(\w*)@\/sap\/hana\/testtools\/unit\/jasminexs\/jasminexsRunner\.xsjslib:\d+[\r\n]+$/, "");
			truncated = truncated.replace(/(\w*)(?:@\/sap\/hana\/testtools\/unit\/jasminexs\/jasminexsRunner\.xsjslib:\d+[\r\n]+)+$/, "");
			truncated = truncated.replace(/(?:\w*@\/sap\/hana\/testtools\/unit\/jasminexs\/lib\/\w+\.xsjslib:\d+[\r\n]+)+$/, "");
			return truncated;
		}*/

        function buildIDEResourceLink(resource){
            return "./test" + resource.filename
        }

		function getResourceInfo(result) {
			if (!result.__resource || !result.__resource.filename) {
				return createDOM("span");
			}

			var testResource = createDOM("a", {
				href : buildIDEResourceLink(result.__resource),
				class : "resource",
				target : "_blank"
			});
			var match = result.__resource.filename.match(/^(.*\/)([^\/]+)\.xsjslib$/);
			if (match) {
				testResource.appendChild(match[1]);
				testResource.appendChild(createDOM("strong", {}, match[2]));
				testResource.appendChild(".xsjslib");
			} else {
				testResource.appendChild(result.__resource.file);
			}
			if (result.__resource.linenr) {
				testResource.appendChild(", line ");
				testResource.appendChild(createDOM("strong", {}, result.__resource.linenr));
			}
			return testResource;
		}

		function getTimingInfo(result) {
			if (!result.timer || [ "disabled", "pending" ].indexOf(result.status) !== -1) {
				return createDOM("span");
			}
			return createDOM("span", {
				class : "timing"
			}, "(", (result.timer.elapsed() / 1000) + "s"  , ")");
		}

		function getClassFlavor(resultNode) {
			var status = resultNode.getStatus();
			return status ? " " + status : "";
		}

		var details = [];
		this.specDone = function(result) {
		
			//console.log('htmlReporter.specDone ', result)
			
			//result.timer.stop();
            result.timer.elapsedTime = result.timer.elapsed()

			if ([ "disabled", "warning", "info", "pending" ].indexOf(result.status) === -1) {
				specsExecuted++;
			}

			htmlElements.symbols.appendChild(createDOM("li", {
				class : result.status,
				id : "spec_" + result.id,
				title : result.fullName
			}));

            /*
			var severity = result.failedExpectations.reduce(function(max, failure) {
				return Math.max(max, failure.severity !== undefined ? failure.severity : jasmine.Spec.severity.ERROR);
			}, jasmine.Spec.severity.NONE);
            */

			var failed = result.status === "failed" //|| severity >= jasmine.Spec.severity.ERROR; // result.failedExpectations.length > 0;
			if (failed) {
				failureCount++;
			}

			//if (severity >= jasmine.Spec.severity.INFO) { // failed || result.logMessages.length > 0) {
            if(failed){
				var descriptionFragments = [];
				try {
					descriptionFragments = currentChild.getDescriptionFragments();
				} catch (e) {
					descriptionFragments = [ e.toString() ];
				}
				var description = createDOM("div", {
					class : "description"
				});
				var descriptionSoFar = "";
				descriptionFragments.forEach(function(fragment) {
					descriptionSoFar = (descriptionSoFar + " " + fragment).trim();
					description.appendChild(createDOM("a", {
						title : descriptionSoFar
						/*href : specHref({
							fullName : descriptionSoFar
						})*/
					}, fragment));
					description.appendChild(" ");
				});
				description.appendChild(getResourceInfo(result));

				var messages = createDOM("div", {
					class : "messages"
				});
				var detail = createDOM("div", {
					class : "spec-detail"
				}, description, messages);

				// var hasWarnings = false;
				result./*logMessages*/failedExpectations.forEach(function(log) {
                    /*
					if (log.severity === jasmine.Spec.severity.WARNING) {
						// if (log.type && log.type === "Warning") {
						// hasWarnings = true;
						warningCount++;
					}*/
					//var severityDisplayName = getSeverityDisplayName(log.severity !== undefined ? log.severity : jasmine.Spec.severity.ERROR);

					messages.appendChild(
                        createDOM("div", {
						    class : "result-message"
					    }, "", log.message)
                    );

                    messages.appendChild(createDOM("div", {
                        class : "stack-trace"
					}, log.stack ));
				});
				/*result.failedExpectations.forEach(function(expectation) {
					messages.appendChild(createDOM("div", {
						class : "result-message"
					}, expectation.message));
					messages.appendChild(createDOM("div", {
						class : "stack-trace"
					}, cleanupStack(expectation.stack)));
				});*/

                detail.className += " failed";
				/*
                if (failed) {
					detail.className += " failed";
				} else if (severity >= jasmine.Spec.severity.WARNING) {
					detail.className += " warning";
				}*/

				details.push(detail);
			}//if failed

			if (result.status === "pending") {
				pendingSpecCount++;
			}
		};

		this.jasmineDone = function() {
            var elapsedTime = timer.elapsedTime || timer.elapsed()
			htmlElements.banner.appendChild(createDOM("span", {
				class : "duration"
			}, "finished in " + elapsedTime / 1000 + "s"));

			if (specsExecuted + pendingSpecCount !== this.totalSpecsDefined) {
				var skippedMessage = "Ran " + specsExecuted + " of " + (this.totalSpecsDefined - pendingSpecCount) + " specs - run all";
				htmlElements.alert.appendChild(createDOM("span", {
					class : "bar skipped"
				},  skippedMessage));

				htmlElements.toggleSkipped = createDOM("a", {
					href : "#",
					style : "",
				}, "[+] show skipped");
				htmlElements.toggleSkipped.onclick = function() {
					if (/\bno-details\b/.test(htmlElements.results.className)) {
						htmlElements.results.className = htmlElements.results.className.replace(/\bno-details\b/, "");
						htmlElements.toggleSkipped.firstChild.data = "[-] hide skipped";
					} else {
						htmlElements.results.className += "no-details";
						htmlElements.toggleSkipped.firstChild.data = "[+] show skipped";
					}
				};
				summary.appendChild(createDOM("ul", {
					class : "suite",
					style : "float: right; margin: 0;"
				}, htmlElements.toggleSkipped));
			}
			var statusBarMessage = pluralize("spec", specsExecuted) + ", " + pluralize("failure", failureCount);
			if (warningCount) {
				statusBarMessage += ", " + pluralize("warning", warningCount);
			}
			if (pendingSpecCount) {
				statusBarMessage += ", " + pluralize("pending spec", pendingSpecCount);
			}

			var statusBarClassName = "bar " + (failureCount > 0 ? "failed" : (warningCount > 0 ? "warnings" : "passed"));
			htmlElements.alert.appendChild(createDOM("span", {
				class : statusBarClassName
			}, statusBarMessage));

			htmlElements.results.appendChild(summary);

			function summaryList(resultsTree, domParent) {
				resultsTree.children.forEach(function(resultNode) {
					if (resultNode.type === "suite") {
						var suiteListNode = createDOM("ul", {
							class : "suite",
							id : "suite-" + resultNode.result.id
						}, createDOM("li", {
							class : "suite-detail" + getClassFlavor(resultNode)
						}, resultNode.result.description
                         , getTimingInfo(resultNode.result)
                         , getResourceInfo(resultNode.result)));

						summaryList(resultNode, suiteListNode);
						domParent.appendChild(suiteListNode);
					}
					if (resultNode.type === "spec") {
						if (domParent.className !== "specs") {
							var specListNode = createDOM("ul", {
								class : "specs"
							});
							domParent.appendChild(specListNode);
							specListNode.appendChild(createDOM("li", {
								class : resultNode.result.status,
								id : "spec-" + resultNode.result.id
							}
                            ,resultNode.result.description
                            ,getTimingInfo(resultNode.result)));
						}
					}
				});
			}

			summaryList(topResults, summary);

			if (details.length) {
				var detailsCaption = failureCount > 0 ? "Failures" : (warningCount > 0 ? "Warnings" : "Logs");
				var detailsMenu = createDOM("a", {
					class : "details-menu",
					href : "#"
				}, detailsCaption);
				var specListMenu = createDOM("a", {
					class : "spec-list-menu",
					href : "#spec-list"
				}, "Spec List");

				htmlElements.results.className += " has-errors";
				htmlElements.alert.appendChild(createDOM("span", {
					class : "menu bar spec-list"
				}, createDOM("span", {}, "Spec List | "), detailsMenu));
				htmlElements.alert.appendChild(createDOM("span", {
					class : "menu bar details-list"
				}, specListMenu, createDOM("span", {}, " | " + detailsCaption + " ")));

				var ie8 = false;
				detailsMenu.onclick = function() { // IE8 only
					if (!ie8) {
						return true;
					}
					if (setMenuModeTo) {
						setMenuModeTo("details-list");
					}
					return false;
				};
				specListMenu.onclick = function() { // IE8 only
					if (!ie8) {
						return true;
					}
					if (setMenuModeTo) {
						setMenuModeTo("spec-list");
					}
					return false;
				};

				setMenuModeTo("details-list");

				details.forEach(function(detail) {
					htmlElements.details.appendChild(detail);
				});
			}
		};

		this.reportStatus = function(status) {
			/*var outerDiv = DOM.create("div", {
				id : "TrivialReporter",
				class : "jasmine_reporter"
			});
			var warning = DOM.create("div", {
				class : "runner warning"
			});
			this.document.appendChild(outerDiv);
			outerDiv.appendChild(warning);*/

			var warning = createDOM("span", {
				class : "bar"
			});

			switch (status.toUpperCase()) {
			case "PREPARED":
				warning.appendChild("Tests have not been started yet.");
				warning.className += " failed";
				break;
			case "STARTED":
				warning.appendChild("Tests are running...");
				warning.className += " warnings";
				break;
			default:
				throw new Error("unknown status '" + status + "'");
			}

			htmlElements.alert.appendChild(warning);
		};

		this.getResults = function() {
			htmlElements.main.attributes.id = "reporter_main";
			exportRawJSToDOM('var htmlElements = { main : document.getElementById("reporter_main"),');
			exportRawJSToDOM('results : document.getElementById("reporter_results"),');
			if (htmlElements.toggleSkipped) {
				exportRawJSToDOM('toggleSkipped : document.getElementById("' + htmlElements.toggleSkipped.id + '")');
			}
			exportRawJSToDOM('};');
			exportFunctionToDOM(setMenuModeTo/*, "lt IE 9"*/);

			var testResults = '<!DOCTYPE html>\n';
			testResults += '<html>\n';
			testResults += '<head>\n';
			testResults += '  <title>HANA Test Tools</title>\n';

			//testResults += '  <link rel=StyleSheet href="/sap/hana/testtools/unit/jasminexs/reporter2/html/jasmine.css" type="text/css" media=screen />\n';
            testResults += '<style type="text/css" media="screen">\n'
            var cssImport = fs.readFileSync(__dirname +'/jasmine.css')
            testResults += cssImport
            testResults += '</style>\n'

			testResults += '  <script type="text/javascript">//<![CDATA[\n';
			testResults += '    var ie8 = false;\n';
			testResults += '  //]]></script>\n';
			testResults += '  <!--[if lt IE 8]><style type="text/css" media="screen">\n';
			testResults += '    .html-reporter .symbol-summary li { display: inline; zoom: 1; }\n';
			testResults += '  </style><![endif]-->\n';
			testResults += '  <!--[if lt IE 9]><style type="text/css" media="screen">\n';
			testResults += '    .html-reporter.details-list .bar.menu.details-list, .html-reporter.details-list .results .details { display: block !important; }\n';
			testResults += '    .html-reporter.spec-list .bar.menu.details-list, .html-reporter.spec-list .results .details { display: none !important; }\n';
			testResults += '    .html-reporter.details-list .bar.menu.spec-list, .html-reporter.details-list .summary { display: none !important; }\n';
			testResults += '    .html-reporter.spec-list .bar.menu.spec-list, .html-reporter.spec-list .summary { display: block !important; }\n';
			testResults += '  </style>\n';
			testResults += '  <script type="text/javascript">\n';
			testResults += '    ie8 = true;\n';
			testResults += '  </script><![endif]-->\n';
			testResults += '</head>\n';
			var scriptNode = getExportedSymbolsForDOM(); // .render();
			// var scriptNode = new DOMRawTextNode('<!--[if lt IE 9]>' + script + '<![endif]-->');
			document.appendChild(scriptNode);
			testResults += document.render();
			testResults += '</html>';
			return testResults;
		};

		this.getContentType = function() {
			return "text/html";
		};

		function getMessageResult(details, message, status) {
			return {
				fullName : message,
				description : message,
				id : "",
				status : status,
				failedExpectations : /*[], logMessages :*/details
			};
		}
		function printMessage(reporter, details, message, title, status) {
			var headlineResult = {
				fullName : title,
				description : title,
				id : "",
				status : ""
			};

			var messageResult = getMessageResult(details, message, status);
			reporter.suiteStarted(headlineResult);
			reporter.specStarted(messageResult);
			reporter.specDone(messageResult);
			reporter.suiteDone(headlineResult);
		}
		this.showWarning = function(message) {
			var logs = [ {
				severity : jasmine.Spec.severity.WARNING,
				message : message
			} ];
			printMessage(this, logs, message, "Warning", "warning");
		};
		this.showInformation = function(title, message, details) {
			var logs = [ {
				severity : jasmine.Spec.severity.INFO,
				message : details
			} ];
			printMessage(this, logs, message, title, "info");
		};

		this.reportProfileFailed = function() {
			var profileName = jasmine.getEnv().params.profile;
			var message = "Profile" + (profileName ? " '" + profileName + "'" : "") + " not found";
			this.showWarning(message);
		};

		this.reportNoLibraries = function() {
			var pattern = jasmine.getEnv().params.pattern;
			var message = "No test libraries found" + (pattern ? " for pattern '" + pattern + "'" : "");
			this.showWarning(message);
		};

		this.reportPackageNotFound = function() {
			var packageName = jasmine.getEnv().params.package;
			var message = "Package" + (packageName ? " '" + packageName + "'" : "") + " not found";
			this.showWarning(message);
		};

		this.reportCoverage = function(runID) {
			if (/^\d+$/.test(runID)) {
				var message = "Code coverage results available";
				var details = createDOM("a", {
					href : "GetTestResults.xsjs?runid=" + runID + "&coverage=1",
					target : "_blank"
				}, "Show coverage results");
				this.showInformation("Code Coverage", message, details);
			}
		};

	};

module.exports = HtmlReporter
