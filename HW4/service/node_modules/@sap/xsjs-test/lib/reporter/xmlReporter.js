
var DOM = require('./dom.js')


var XmlReporter = null;


    var noopTimer = {
        start : function() {
            return;
        },
        elapsed : function() {
            return 0;
        }
    };

    function pad(n) {
        return n < 10 ? '0' + n : n;
    }

    function formatISODateString(d) {
        return d.getFullYear() + '-' + pad(d.getMonth() + 1) + '-' + pad(d.getDate()) + 'T' + pad(d.getHours()) + ':' + pad(d.getMinutes()) + ':' + pad(d.getSeconds());
    }

    function sum(a, b) {
        return a + b;
    }

    function ResultsNode(result, type, domNode, parent) {
        this.result = result;
        this.type = type;
        this.parent = parent;
        this.domNode = domNode;

        this.children = [];

        var cachedSpecCount = null;
        var cachedFailureCount = null;
        this.invalidateCache = function() {
            if (cachedSpecCount || cachedFailureCount) {
                cachedSpecCount = null;
                cachedFailureCount = null;
                if (this.parent) {
                    this.parent.invalidateCache();
                }
            }
        };

        this.addChild = function(result, type, domNode) {
            this.invalidateCache();
            var child = new ResultsNode(result, type, domNode, this);
            this.children.push(child);
            return child;
        };

        this.getFailedCount = function() {
            if (cachedFailureCount === null) {
                if (this.type === "spec") {
                    cachedFailureCount = this.result.failedExpectations.length;
                } else {
                    cachedFailureCount = this.children.map(function(child) {
                        return child.getFailedCount();
                    }).reduce(sum, 0);
                }
            }
            return cachedFailureCount;
        };

        this.getSpecCount = function() {
            if (this.type === "spec") {
                return 1;
            }
            if (cachedSpecCount === null) {
                cachedSpecCount = this.children.map(function(child) {
                    return child.getSpecCount();
                }).reduce(sum, 0);
            }
            return cachedSpecCount;
        };
    }

    XmlReporter = function(jasmineInterface) {
        var jasmine = jasmineInterface.jasmine
        this.xml = null;

        this.type = "xml";

        // var timer = jasmine && jasmine.Timer ? new jasmine.Timer() : noopTimer;
        var topResults = null, currentSuite = null, currentParent = null;

        this.initialize = function() {
            this.xml = DOM.create("testsuites", {});
            currentSuite = this.xml;
            topResults = new ResultsNode({}, "", this.xml, null);
            currentParent = topResults;
        };

        /*this.jasmineStarted = function() {
         timer.start();
         };*/

        // TODO: make currentSuite local or remove currentParent.domNode
        this.suiteStarted = function(result) {
            var suite = DOM.create("testsuite", {
                name : result.fullName,
                errors : 0
            });
            currentSuite.appendChild(suite);
            currentSuite = suite;
            currentParent = currentParent.addChild(result, "suite", suite);

            if (!result.timer) {
                result.timer = jasmine && jasmine.Timer ? new jasmine.Timer() : noopTimer;
            }
            result.timer.start()
            result.timer.startTime = new Date()
        };

        this.suiteDone = function(result) {
            currentParent.domNode.attributes.tests = currentParent.getSpecCount();
            currentParent.domNode.attributes.failures = currentParent.getFailedCount();
            if (result.timer) {
                currentParent.domNode.attributes.time = result.timer.elapsed() / 1000;
                currentParent.domNode.attributes.timestamp = formatISODateString(result.timer.startTime);
            }

            if (!currentParent.parent) {
                return;
            }
            currentParent = currentParent.parent;
            currentSuite = currentParent.domNode;
        };

        this.specStarted = function(result) {
            if (!result.timer) {
                result.timer = jasmine && jasmine.Timer ? new jasmine.Timer() : noopTimer;
            }
            result.timer.start();
        };

        function getResourceName(result) {
            var dot = "&#x2E;", quote = "&quot;";
            var resource = "";
            if (result.testResource && result.testResource.file) {
                resource += result.testResource.file.replace(/^\//, "").replace(".", dot, "g").replace(/\/([^\/]+)$/, ":$1").replace("/", ".", "g");
                resource += ".";
            }
            resource += result.description.replace(".", dot, "g").replace('"', quote, "g");
            return resource;
        }

        // TODO: remove spec from result
        this.specDone = function(result) {

            var fileName = (result.__resource && result.__resource.filename ? result.__resource.filename.replace(/\\/g, "/") : "");

            var spec = DOM.create('testcase', {
                classname : fileName,
                name : result.description,
                time : result.timer.elapsed() / 1000
            });
            currentParent.addChild(result, "spec", spec);

            result.failedExpectations.forEach(function(expectation) {
                var stack = (expectation.stack ? expectation.stack.replace(/\\/g, "/") : "");
                var failure = DOM.create("failure", {
                    message: expectation.message
                }, stack);
                spec.appendChild(failure);
            });
            currentSuite.appendChild(spec);
        };

        this.reportStatus = function(status) {
            if ([ "PREPARED", "STARTED" ].indexOf(status.toUpperCase()) === -1) {
                throw new Error("unknown status '" + status + "'");
            }

            this.xml = DOM.create("testrun", {
                status : status
            });
        };

        this.getResults = function() {
            var testResults = '<?xml version="1.0" encoding="UTF-8" ?>\n';
            testResults += this.xml.render();
            return testResults;
        };

        this.getContentType = function() {
            return "application/xml";
        };

    };

module.exports = XmlReporter
