
var DependencySubstitutions = require('./dependencySubstitutions.js')
var DependencySubstitutorFactory = require('./dependencySubstitutorFactory.js')
var DependencyHierarchyBuilder = require('./dependencyHierarchyBuilder.js')
var HierarchyCreator = require('./hierarchyCreator.js')

var TestModelCreator = {};




    var validateParameter;

    TestModelCreator.execute = function(originalModel, targetPackage, dependencySubstitutions, truncOption) {
        $.trace.info("creating test model (parameters: " + arguments.toSource() + ")");

        // for testability, get Repository and Repository on every execute()
        var RepositoryFacade = $.import("sap.hana.testtools.mockstar", "repositoryFacade").RepositoryFacade;
        var Repository = $.import("sap.hana.testtools.unit.util.internal", "repository").Repository;

        validateParameter(originalModel, targetPackage, dependencySubstitutions);

        var substitutorFactory = new DependencySubstitutorFactory();

        var testModel = null;
        var connection = $.db.getConnection($.db.isolation.SERIALIZABLE);
        try {
            var repository = new RepositoryFacade(new Repository(connection));
            var dependencySubstitutionRules = new DependencySubstitutions(dependencySubstitutions, repository);
            var dependencyHierarchyBuilder = new DependencyHierarchyBuilder(repository);

            var dependencyHierarchy = dependencyHierarchyBuilder.buildHierarchyFor(originalModel, dependencySubstitutionRules);
            dependencyHierarchy.updateEntitiesToBeSubstituted(dependencySubstitutionRules);
            dependencyHierarchy.removeElementsThatCanRemainUnchanged(dependencySubstitutionRules);

            dependencyHierarchy.readCData(repository);

            dependencyHierarchy.assignFinalNames(dependencySubstitutionRules, targetPackage, truncOption);
            dependencyHierarchy.adaptDependenciesInContent(substitutorFactory);

            var hierarchyCreator = new HierarchyCreator(repository);

            hierarchyCreator.writeAndActivateObjects(dependencyHierarchy);

            testModel = {
                designTimePath : dependencyHierarchy.rootModel.getName(),
                runTimePath : dependencyHierarchy.rootModel.getRuntimeName()
            };
        } finally {
            connection.close();
        }
        $.trace.info("finished creating test model (parameters: " + arguments.toSource() + ")");
        return testModel;
    };

    validateParameter = function(originalModel, targetPackage, dependencySubstitutions) {
        if (!originalModel) {
            throw new Error("Please specify the parameter originalModel");
        }
        if (!targetPackage) {
            throw new Error("Please specify the parameter targetPackage");
        }
        if (!dependencySubstitutions) {
            throw new Error("Please specify the parameter dependencySubstitutions");
        }
        if (!dependencySubstitutions.length) {
            throw new Error('Please specify at least one dependencySubstitution e.g. {original:{schema:"ERP",name:"PAYMENTS"},substitute:{schema:"UNITTEST",name:"PAYMENTS"}}');
        }
        dependencySubstitutions.forEach(function(value) {
            if (typeof value !== "object" || typeof value.original !== "object" || typeof value.substitute !== "object") {
                throw new Error('Please specify valid dependencySubstitutions e.g. {original:{schema:"ERP",name:"PAYMENTS"},substitute:{schema:"UNITTEST",name:"PAYMENTS"}}');
            }
            if (typeof value.original.schema !== "string") {
                value.original.schema = "";
            }
            if (typeof value.original.name !== "string" || !value.original.name) {
                throw new Error('Please specify a valid dependencySubstitution original name');
            }
            if (typeof value.substitute.schema !== "string") {
                value.substitute.schema = "";
            }
            if (typeof value.substitute.name !== "string" || !value.substitute.name) {
                throw new Error('Please specify a valid dependencySubstitution substitute name');
            }
        });
    };


module.exports = TestModelCreator
